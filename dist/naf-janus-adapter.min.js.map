{"version":3,"file":"naf-janus-adapter.min.js","mappings":"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","sources":["webpack://@networked-aframe/naf-janus-adapter/./node_modules/@networked-aframe/minijanus/minijanus.js","webpack://@networked-aframe/naf-janus-adapter/./src/index.js","webpack://@networked-aframe/naf-janus-adapter/./node_modules/sdp/sdp.js","webpack://@networked-aframe/naf-janus-adapter/webpack/bootstrap","webpack://@networked-aframe/naf-janus-adapter/webpack/startup"],"sourcesContent":["/**\n * Represents a handle to a single Janus plugin on a Janus session. Each WebRTC connection to the Janus server will be\n * associated with a single handle. Once attached to the server, this handle will be given a unique ID which should be\n * used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#handles.\n **/\nfunction JanusPluginHandle(session) {\n  this.session = session;\n  this.id = undefined;\n}\n\n/** Attaches this handle to the Janus server and sets its ID. **/\nJanusPluginHandle.prototype.attach = function(plugin, loop_index) {\n  var payload = { plugin: plugin, loop_index: loop_index, \"force-bundle\": true, \"force-rtcp-mux\": true };\n  return this.session.send(\"attach\", payload).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Detaches this handle. **/\nJanusPluginHandle.prototype.detach = function() {\n  return this.send(\"detach\");\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this plugin handle with the\n * `janus` attribute equal to `ev`.\n **/\nJanusPluginHandle.prototype.on = function(ev, callback) {\n  return this.session.on(ev, signal => {\n    if (signal.sender == this.id) {\n      callback(signal);\n    }\n  });\n};\n\n/**\n * Sends a signal associated with this handle. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusPluginHandle.prototype.send = function(type, signal) {\n  return this.session.send(type, Object.assign({ handle_id: this.id }, signal));\n};\n\n/** Sends a plugin-specific message associated with this handle. **/\nJanusPluginHandle.prototype.sendMessage = function(body) {\n  return this.send(\"message\", { body: body });\n};\n\n/** Sends a JSEP offer or answer associated with this handle. **/\nJanusPluginHandle.prototype.sendJsep = function(jsep) {\n  return this.send(\"message\", { body: {}, jsep: jsep });\n};\n\n/** Sends an ICE trickle candidate associated with this handle. **/\nJanusPluginHandle.prototype.sendTrickle = function(candidate) {\n  return this.send(\"trickle\", { candidate: candidate });\n};\n\n/**\n * Represents a Janus session -- a Janus context from within which you can open multiple handles and connections. Once\n * created, this session will be given a unique ID which should be used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#sessions.\n **/\nfunction JanusSession(output, options) {\n  this.output = output;\n  this.id = undefined;\n  this.nextTxId = 0;\n  this.txns = {};\n  this.eventHandlers = {};\n  this.options = Object.assign({\n    verbose: false,\n    timeoutMs: 10000,\n    keepaliveMs: 30000\n  }, options);\n}\n\n/** Creates this session on the Janus server and sets its ID. **/\nJanusSession.prototype.create = function() {\n  return this.send(\"create\").then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/**\n * Destroys this session. Note that upon destruction, Janus will also close the signalling transport (if applicable) and\n * any open WebRTC connections.\n **/\nJanusSession.prototype.destroy = function() {\n  return this.send(\"destroy\").then((resp) => {\n    this.dispose();\n    return resp;\n  });\n};\n\n/**\n * Disposes of this session in a way such that no further incoming signalling messages will be processed.\n * Outstanding transactions will be rejected.\n **/\nJanusSession.prototype.dispose = function() {\n  this._killKeepalive();\n  this.eventHandlers = {};\n  for (var txId in this.txns) {\n    if (this.txns.hasOwnProperty(txId)) {\n      var txn = this.txns[txId];\n      clearTimeout(txn.timeout);\n      txn.reject(new Error(\"Janus session was disposed.\"));\n      delete this.txns[txId];\n    }\n  }\n};\n\n/**\n * Whether this signal represents an error, and the associated promise (if any) should be rejected.\n * Users should override this to handle any custom plugin-specific error conventions.\n **/\nJanusSession.prototype.isError = function(signal) {\n  return signal.janus === \"error\";\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this session with the\n * `janus` attribute equal to `ev`.\n **/\nJanusSession.prototype.on = function(ev, callback) {\n  var handlers = this.eventHandlers[ev];\n  if (handlers == null) {\n    handlers = this.eventHandlers[ev] = [];\n  }\n  handlers.push(callback);\n};\n\n/**\n * Callback for receiving JSON signalling messages pertinent to this session. If the signals are responses to previously\n * sent signals, the promises for the outgoing signals will be resolved or rejected appropriately with this signal as an\n * argument.\n *\n * External callers should call this function every time a new signal arrives on the transport; for example, in a\n * WebSocket's `message` event, or when a new datum shows up in an HTTP long-polling response.\n **/\nJanusSession.prototype.receive = function(signal) {\n  if (this.options.verbose) {\n    this._logIncoming(signal);\n  }\n  if (signal.session_id != this.id) {\n    console.warn(\"Incorrect session ID received in Janus signalling message: was \" + signal.session_id + \", expected \" + this.id + \".\");\n  }\n\n  var responseType = signal.janus;\n  var handlers = this.eventHandlers[responseType];\n  if (handlers != null) {\n    for (var i = 0; i < handlers.length; i++) {\n      handlers[i](signal);\n    }\n  }\n\n  if (signal.transaction != null) {\n    var txn = this.txns[signal.transaction];\n    if (txn == null) {\n      // this is a response to a transaction that wasn't caused via JanusSession.send, or a plugin replied twice to a\n      // single request, or the session was disposed, or something else that isn't under our purview; that's fine\n      return;\n    }\n\n    if (responseType === \"ack\" && txn.type == \"message\") {\n      // this is an ack of an asynchronously-processed plugin request, we should wait to resolve the promise until the\n      // actual response comes in\n      return;\n    }\n\n    clearTimeout(txn.timeout);\n\n    delete this.txns[signal.transaction];\n    (this.isError(signal) ? txn.reject : txn.resolve)(signal);\n  }\n};\n\n/**\n * Sends a signal associated with this session, beginning a new transaction. Returns a promise that will be resolved or\n * rejected when a response is received in the same transaction, or when no response is received within the session\n * timeout.\n **/\nJanusSession.prototype.send = function(type, signal) {\n  signal = Object.assign({ transaction: (this.nextTxId++).toString() }, signal);\n  return new Promise((resolve, reject) => {\n    var timeout = null;\n    if (this.options.timeoutMs) {\n      timeout = setTimeout(() => {\n        delete this.txns[signal.transaction];\n        reject(new Error(\"Signalling transaction with txid \" + signal.transaction + \" timed out.\"));\n      }, this.options.timeoutMs);\n    }\n    this.txns[signal.transaction] = { resolve: resolve, reject: reject, timeout: timeout, type: type };\n    this._transmit(type, signal);\n  });\n};\n\nJanusSession.prototype._transmit = function(type, signal) {\n  signal = Object.assign({ janus: type }, signal);\n\n  if (this.id != null) { // this.id is undefined in the special case when we're sending the session create message\n    signal = Object.assign({ session_id: this.id }, signal);\n  }\n\n  if (this.options.verbose) {\n    this._logOutgoing(signal);\n  }\n\n  this.output(JSON.stringify(signal));\n  this._resetKeepalive();\n};\n\nJanusSession.prototype._logOutgoing = function(signal) {\n  var kind = signal.janus;\n  if (kind === \"message\" && signal.jsep) {\n    kind = signal.jsep.type;\n  }\n  var message = \"> Outgoing Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \";\n  console.debug(\"%c\" + message, \"color: #040\", signal);\n};\n\nJanusSession.prototype._logIncoming = function(signal) {\n  var kind = signal.janus;\n  var message = signal.transaction ?\n      \"< Incoming Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \" :\n      \"< Incoming Janus \" + (kind || \"signal\") + \": \";\n  console.debug(\"%c\" + message, \"color: #004\", signal);\n};\n\nJanusSession.prototype._sendKeepalive = function() {\n  return this.send(\"keepalive\");\n};\n\nJanusSession.prototype._killKeepalive = function() {\n  clearTimeout(this.keepaliveTimeout);\n};\n\nJanusSession.prototype._resetKeepalive = function() {\n  this._killKeepalive();\n  if (this.options.keepaliveMs) {\n    this.keepaliveTimeout = setTimeout(() => {\n      this._sendKeepalive().catch(e => console.error(\"Error received from keepalive: \", e));\n    }, this.options.keepaliveMs);\n  }\n};\n\nmodule.exports = {\n  JanusPluginHandle,\n  JanusSession\n};\n","/* global NAF */\nvar mj = require(\"@networked-aframe/minijanus\");\nmj.JanusSession.prototype.sendOriginal = mj.JanusSession.prototype.send;\nmj.JanusSession.prototype.send = function(type, signal) {\n  return this.sendOriginal(type, signal).catch((e) => {\n    if (e.message && e.message.indexOf(\"timed out\") > -1) {\n      console.error(\"web socket timed out\");\n      NAF.connection.adapter.reconnect();\n    } else {\n      throw(e);\n    }\n  });\n}\n\nvar sdpUtils = require(\"sdp\");\n//var debug = require(\"debug\")(\"naf-janus-adapter:debug\");\n//var warn = require(\"debug\")(\"naf-janus-adapter:warn\");\n//var error = require(\"debug\")(\"naf-janus-adapter:error\");\nvar debug = console.log;\nvar warn = console.warn;\nvar error = console.error;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nconst SUBSCRIBE_TIMEOUT_MS = 15000;\n\nfunction debounce(fn) {\n  var curr = Promise.resolve();\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    curr = curr.then(_ => fn.apply(this, args));\n  };\n}\n\nfunction randomUint() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction untilDataChannelOpen(dataChannel) {\n  return new Promise((resolve, reject) => {\n    if (dataChannel.readyState === \"open\") {\n      resolve();\n    } else {\n      let resolver, rejector;\n\n      const clear = () => {\n        dataChannel.removeEventListener(\"open\", resolver);\n        dataChannel.removeEventListener(\"error\", rejector);\n      };\n\n      resolver = () => {\n        clear();\n        resolve();\n      };\n      rejector = () => {\n        clear();\n        reject();\n      };\n\n      dataChannel.addEventListener(\"open\", resolver);\n      dataChannel.addEventListener(\"error\", rejector);\n    }\n  });\n}\n\nconst isH264VideoSupported = (() => {\n  const video = document.createElement(\"video\");\n  return video.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"') !== \"\";\n})();\n\nconst OPUS_PARAMETERS = {\n  // indicates that we want to enable DTX to elide silence packets\n  usedtx: 1,\n  // indicates that we prefer to receive mono audio (important for voip profile)\n  stereo: 0,\n  // indicates that we prefer to send mono audio (important for voip profile)\n  \"sprop-stereo\": 0\n};\n\nconst DEFAULT_PEER_CONNECTION_CONFIG = {\n  iceServers: [{ urls: \"stun:stun1.l.google.com:19302\" }, { urls: \"stun:stun2.l.google.com:19302\" }]\n};\n\nconst WS_NORMAL_CLOSURE = 1000;\n\nclass JanusAdapter {\n  constructor() {\n    this.room = null;\n    // We expect the consumer to set a client id before connecting.\n    this.clientId = null;\n    this.joinToken = null;\n\n    this.serverUrl = null;\n    this.webRtcOptions = {};\n    this.peerConnectionConfig = null;\n    this.ws = null;\n    this.session = null;\n    this.reliableTransport = \"datachannel\";\n    this.unreliableTransport = \"datachannel\";\n\n    // In the event the server restarts and all clients lose connection, reconnect with\n    // some random jitter added to prevent simultaneous reconnection requests.\n    this.initialReconnectionDelay = 1000 * Math.random();\n    this.reconnectionDelay = this.initialReconnectionDelay;\n    this.reconnectionTimeout = null;\n    this.maxReconnectionAttempts = 10;\n    this.reconnectionAttempts = 0;\n\n    this.publisher = null;\n    this.occupants = {};\n    this.leftOccupants = new Set();\n    this.mediaStreams = {};\n    this.localMediaStream = null;\n    this.pendingMediaRequests = new Map();\n\n    this.blockedClients = new Map();\n    this.frozenUpdates = new Map();\n\n    this.timeOffsets = [];\n    this.serverTimeRequests = 0;\n    this.avgTimeOffset = 0;\n\n    this.onWebsocketOpen = this.onWebsocketOpen.bind(this);\n    this.onWebsocketClose = this.onWebsocketClose.bind(this);\n    this.onWebsocketMessage = this.onWebsocketMessage.bind(this);\n    this.onDataChannelMessage = this.onDataChannelMessage.bind(this);\n    this.onData = this.onData.bind(this);\n  }\n\n  setServerUrl(url) {\n    this.serverUrl = url;\n  }\n\n  setApp(app) {}\n\n  setRoom(roomName) {\n    this.room = roomName;\n  }\n\n  setJoinToken(joinToken) {\n    this.joinToken = joinToken;\n  }\n\n  setClientId(clientId) {\n    this.clientId = clientId;\n  }\n\n  setWebRtcOptions(options) {\n    this.webRtcOptions = options;\n  }\n\n  setPeerConnectionConfig(peerConnectionConfig) {\n    this.peerConnectionConfig = peerConnectionConfig;\n  }\n\n  setServerConnectListeners(successListener, failureListener) {\n    this.connectSuccess = successListener;\n    this.connectFailure = failureListener;\n  }\n\n  setRoomOccupantListener(occupantListener) {\n    this.onOccupantsChanged = occupantListener;\n  }\n\n  setDataChannelListeners(openListener, closedListener, messageListener) {\n    this.onOccupantConnected = openListener;\n    this.onOccupantDisconnected = closedListener;\n    this.onOccupantMessage = messageListener;\n  }\n\n  setReconnectionListeners(reconnectingListener, reconnectedListener, reconnectionErrorListener) {\n    // onReconnecting is called with the number of milliseconds until the next reconnection attempt\n    this.onReconnecting = reconnectingListener;\n    // onReconnected is called when the connection has been reestablished\n    this.onReconnected = reconnectedListener;\n    // onReconnectionError is called with an error when maxReconnectionAttempts has been reached\n    this.onReconnectionError = reconnectionErrorListener;\n  }\n\n  setEventLoops(loops) {\n    this.loops = loops;\n  }\n\n  connect() {\n    debug(`connecting to ${this.serverUrl}`);\n\n    const websocketConnection = new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.serverUrl, \"janus-protocol\");\n\n      this.session = new mj.JanusSession(this.ws.send.bind(this.ws), { timeoutMs: 40000 });\n\n      this.ws.addEventListener(\"close\", this.onWebsocketClose);\n      this.ws.addEventListener(\"message\", this.onWebsocketMessage);\n\n      this.wsOnOpen = () => {\n        this.ws.removeEventListener(\"open\", this.wsOnOpen);\n        this.onWebsocketOpen()\n          .then(resolve)\n          .catch(reject);\n      };\n\n      this.ws.addEventListener(\"open\", this.wsOnOpen);\n    });\n\n    return Promise.all([websocketConnection, this.updateTimeOffset()]);\n  }\n\n  disconnect() {\n    debug(`disconnecting`);\n\n    clearTimeout(this.reconnectionTimeout);\n\n    this.removeAllOccupants();\n    this.leftOccupants = new Set();\n\n    if (this.publisher) {\n      // Close the publisher peer connection. Which also detaches the plugin handle.\n      this.publisher.conn.close();\n      this.publisher = null;\n    }\n\n    if (this.session) {\n      this.session.dispose();\n      this.session = null;\n    }\n\n    if (this.ws) {\n      this.ws.removeEventListener(\"open\", this.wsOnOpen);\n      this.ws.removeEventListener(\"close\", this.onWebsocketClose);\n      this.ws.removeEventListener(\"message\", this.onWebsocketMessage);\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Now that all RTCPeerConnection closed, be sure to not call\n    // reconnect() again via performDelayedReconnect if previous\n    // RTCPeerConnection was in the failed state.\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n      this.delayedReconnectTimeout = null;\n    }\n  }\n\n  isDisconnected() {\n    return this.ws === null;\n  }\n\n  async onWebsocketOpen() {\n    // Create the Janus Session\n    await this.session.create();\n\n    // Attach the SFU Plugin and create a RTCPeerConnection for the publisher.\n    // The publisher sends audio and opens two bidirectional data channels.\n    // One reliable datachannel and one unreliable.\n    this.publisher = await this.createPublisher();\n\n    // Call the naf connectSuccess callback before we start receiving WebRTC messages.\n    this.connectSuccess(this.clientId);\n\n    const addOccupantPromises = [];\n\n    for (let i = 0; i < this.publisher.initialOccupants.length; i++) {\n      const occupantId = this.publisher.initialOccupants[i];\n      if (occupantId === this.clientId) continue; // Happens during non-graceful reconnects due to zombie sessions\n      addOccupantPromises.push(this.addOccupant(occupantId));\n    }\n\n    await Promise.all(addOccupantPromises);\n  }\n\n  onWebsocketClose(event) {\n    // The connection was closed successfully. Don't try to reconnect.\n    if (event.code === WS_NORMAL_CLOSURE) {\n      return;\n    }\n\n    console.warn(\"Janus websocket closed unexpectedly.\");\n    if (this.onReconnecting) {\n      this.onReconnecting(this.reconnectionDelay);\n    }\n\n    this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n  }\n\n  reconnect() {\n    // Dispose of all networked entities and other resources tied to the session.\n    this.disconnect();\n\n    this.connect()\n      .then(() => {\n        this.reconnectionDelay = this.initialReconnectionDelay;\n        this.reconnectionAttempts = 0;\n\n        if (this.onReconnected) {\n          this.onReconnected();\n        }\n      })\n      .catch(error => {\n        this.reconnectionDelay += 1000;\n        this.reconnectionAttempts++;\n\n        if (this.reconnectionAttempts > this.maxReconnectionAttempts && this.onReconnectionError) {\n          return this.onReconnectionError(\n            new Error(\"Connection could not be reestablished, exceeded maximum number of reconnection attempts.\")\n          );\n        }\n\n        console.warn(\"Error during reconnect, retrying.\");\n        console.warn(error);\n\n        if (this.onReconnecting) {\n          this.onReconnecting(this.reconnectionDelay);\n        }\n\n        this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n      });\n  }\n\n  performDelayedReconnect() {\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n    }\n\n    this.delayedReconnectTimeout = setTimeout(() => {\n      this.delayedReconnectTimeout = null;\n      this.reconnect();\n    }, 10000);\n  }\n\n  onWebsocketMessage(event) {\n    this.session.receive(JSON.parse(event.data));\n  }\n\n  async addOccupant(occupantId) {\n    if (this.occupants[occupantId]) {\n      this.removeOccupant(occupantId);\n    }\n\n    this.leftOccupants.delete(occupantId);\n\n    var subscriber = await this.createSubscriber(occupantId);\n\n    if (!subscriber) return;\n\n    this.occupants[occupantId] = subscriber;\n\n    this.setMediaStream(occupantId, subscriber.mediaStream);\n\n    // Call the Networked AFrame callbacks for the new occupant.\n    this.onOccupantConnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n\n    return subscriber;\n  }\n\n  removeAllOccupants() {\n    for (const occupantId of Object.getOwnPropertyNames(this.occupants)) {\n      this.removeOccupant(occupantId);\n    }\n  }\n\n  removeOccupant(occupantId) {\n    this.leftOccupants.add(occupantId);\n\n    if (this.occupants[occupantId]) {\n      // Close the subscriber peer connection. Which also detaches the plugin handle.\n      this.occupants[occupantId].conn.close();\n      delete this.occupants[occupantId];\n    }\n\n    if (this.mediaStreams[occupantId]) {\n      delete this.mediaStreams[occupantId];\n    }\n\n    if (this.pendingMediaRequests.has(occupantId)) {\n      const msg = \"The user disconnected before the media stream was resolved.\";\n      this.pendingMediaRequests.get(occupantId).audio.reject(msg);\n      this.pendingMediaRequests.get(occupantId).video.reject(msg);\n      this.pendingMediaRequests.delete(occupantId);\n    }\n\n    // Call the Networked AFrame callbacks for the removed occupant.\n    this.onOccupantDisconnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n  }\n\n  associate(conn, handle) {\n    conn.addEventListener(\"icecandidate\", ev => {\n      handle.sendTrickle(ev.candidate || null).catch(e => error(\"Error trickling ICE: %o\", e));\n    });\n    conn.addEventListener(\"iceconnectionstatechange\", ev => {\n      if (conn.iceConnectionState === \"connected\") {\n        console.log(\"ICE state changed to connected\");\n      }\n      if (conn.iceConnectionState === \"disconnected\") {\n        console.warn(\"ICE state changed to disconnected\");\n      }\n      if (conn.iceConnectionState === \"failed\") {\n        console.warn(\"ICE failure detected. Reconnecting in 10s.\");\n        this.performDelayedReconnect();\n      }\n    })\n\n    // we have to debounce these because janus gets angry if you send it a new SDP before\n    // it's finished processing an existing SDP. in actuality, it seems like this is maybe\n    // too liberal and we need to wait some amount of time after an offer before sending another,\n    // but we don't currently know any good way of detecting exactly how long :(\n    conn.addEventListener(\n      \"negotiationneeded\",\n      debounce(ev => {\n        debug(\"Sending new offer for handle: %o\", handle);\n        var offer = conn.createOffer().then(this.configurePublisherSdp).then(this.fixSafariIceUFrag);\n        var local = offer.then(o => conn.setLocalDescription(o));\n        var remote = offer;\n\n        remote = remote\n          .then(this.fixSafariIceUFrag)\n          .then(j => handle.sendJsep(j))\n          .then(r => conn.setRemoteDescription(r.jsep));\n        return Promise.all([local, remote]).catch(e => error(\"Error negotiating offer: %o\", e));\n      })\n    );\n    handle.on(\n      \"event\",\n      debounce(ev => {\n        var jsep = ev.jsep;\n        if (jsep && jsep.type == \"offer\") {\n          debug(\"Accepting new offer for handle: %o\", handle);\n          var answer = conn\n            .setRemoteDescription(this.configureSubscriberSdp(jsep))\n            .then(_ => conn.createAnswer())\n            .then(this.fixSafariIceUFrag);\n          var local = answer.then(a => conn.setLocalDescription(a));\n          var remote = answer.then(j => handle.sendJsep(j));\n          return Promise.all([local, remote]).catch(e => error(\"Error negotiating answer: %o\", e));\n        } else {\n          // some other kind of event, nothing to do\n          return null;\n        }\n      })\n    );\n  }\n\n  async createPublisher() {\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(\"pub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops && this.clientId ? parseInt(this.clientId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(\"pub waiting for data channels & webrtcup\");\n    var webrtcup = new Promise(resolve => handle.on(\"webrtcup\", resolve));\n\n    // Unreliable datachannel: sending and receiving component updates.\n    // Reliable datachannel: sending and recieving entity instantiations.\n    var reliableChannel = conn.createDataChannel(\"reliable\", { ordered: true });\n    var unreliableChannel = conn.createDataChannel(\"unreliable\", {\n      ordered: false,\n      maxRetransmits: 0\n    });\n\n    reliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-reliable\"));\n    unreliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-unreliable\"));\n\n    await webrtcup;\n    await untilDataChannelOpen(reliableChannel);\n    await untilDataChannelOpen(unreliableChannel);\n\n    // doing this here is sort of a hack around chrome renegotiation weirdness --\n    // if we do it prior to webrtcup, chrome on gear VR will sometimes put a\n    // renegotiation offer in flight while the first offer was still being\n    // processed by janus. we should find some more principled way to figure out\n    // when janus is done in the future.\n    if (this.localMediaStream) {\n      this.localMediaStream.getTracks().forEach(track => {\n        conn.addTrack(track, this.localMediaStream);\n      });\n    }\n\n    // Handle all of the join and leave events.\n    handle.on(\"event\", ev => {\n      var data = ev.plugindata.data;\n      if (data.event == \"join\" && data.room_id == this.room) {\n        if (this.delayedReconnectTimeout) {\n          // Don't create a new RTCPeerConnection, all RTCPeerConnection will be closed in less than 10s.\n          return;\n        }\n        this.addOccupant(data.user_id);\n      } else if (data.event == \"leave\" && data.room_id == this.room) {\n        this.removeOccupant(data.user_id);\n      } else if (data.event == \"blocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: data.by } }));\n      } else if (data.event == \"unblocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: data.by } }));\n      } else if (data.event === \"data\") {\n        this.onData(JSON.parse(data.body), \"janus-event\");\n      }\n    });\n\n    debug(\"pub waiting for join\");\n\n    // Send join message to janus. Listen for join/leave messages. Automatically subscribe to all users' WebRTC data.\n    var message = await this.sendJoin(handle, {\n      notifications: true,\n      data: true\n    });\n\n    if (!message.plugindata.data.success) {\n      const err = message.plugindata.data.error;\n      console.error(err);\n      // We may get here because of an expired JWT.\n      // Close the connection ourself otherwise janus will close it after\n      // session_timeout because we didn't send any keepalive and this will\n      // trigger a delayed reconnect because of the iceconnectionstatechange\n      // listener for failure state.\n      // Even if the app code calls disconnect in case of error, disconnect\n      // won't close the peer connection because this.publisher is not set.\n      conn.close();\n      throw err;\n    }\n\n    var initialOccupants = message.plugindata.data.response.users[this.room] || [];\n\n    if (initialOccupants.includes(this.clientId)) {\n      console.warn(\"Janus still has previous session for this client. Reconnecting in 10s.\");\n      this.performDelayedReconnect();\n    }\n\n    debug(\"publisher ready\");\n    return {\n      handle,\n      initialOccupants,\n      reliableChannel,\n      unreliableChannel,\n      conn\n    };\n  }\n\n  configurePublisherSdp(jsep) {\n    jsep.sdp = jsep.sdp.replace(/a=fmtp:(109|111).*\\r\\n/g, (line, pt) => {\n      const parameters = Object.assign(sdpUtils.parseFmtp(line), OPUS_PARAMETERS);\n      return sdpUtils.writeFmtp({ payloadType: pt, parameters: parameters });\n    });\n    return jsep;\n  }\n\n  configureSubscriberSdp(jsep) {\n    // todo: consider cleaning up these hacks to use sdputils\n    if (!isH264VideoSupported) {\n      if (navigator.userAgent.indexOf(\"HeadlessChrome\") !== -1) {\n        // HeadlessChrome (e.g. puppeteer) doesn't support webrtc video streams, so we remove those lines from the SDP.\n        jsep.sdp = jsep.sdp.replace(/m=video[^]*m=/, \"m=\");\n      }\n    }\n\n    // TODO: Hack to get video working on Chrome for Android. https://groups.google.com/forum/#!topic/mozilla.dev.media/Ye29vuMTpo8\n    if (navigator.userAgent.indexOf(\"Android\") === -1) {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\r\\n\"\n      );\n    } else {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\r\\n\"\n      );\n    }\n    return jsep;\n  }\n\n  async fixSafariIceUFrag(jsep) {\n    // Safari produces a \\n instead of an \\r\\n for the ice-ufrag. See https://github.com/meetecho/janus-gateway/issues/1818\n    jsep.sdp = jsep.sdp.replace(/[^\\r]\\na=ice-ufrag/g, \"\\r\\na=ice-ufrag\");\n    return jsep\n  }\n\n  async createSubscriber(occupantId, maxRetries = 5) {\n    if (this.leftOccupants.has(occupantId)) {\n      console.warn(occupantId + \": cancelled occupant connection, occupant left before subscription negotation.\");\n      return null;\n    }\n\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(occupantId + \": sub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops ? parseInt(occupantId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(occupantId + \": sub waiting for join\");\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after attach\");\n      return null;\n    }\n\n    let webrtcFailed = false;\n\n    const webrtcup = new Promise(resolve => {\n      const leftInterval = setInterval(() => {\n        if (this.leftOccupants.has(occupantId)) {\n          clearInterval(leftInterval);\n          resolve();\n        }\n      }, 1000);\n\n      const timeout = setTimeout(() => {\n        clearInterval(leftInterval);\n        webrtcFailed = true;\n        resolve();\n      }, SUBSCRIBE_TIMEOUT_MS);\n\n      handle.on(\"webrtcup\", () => {\n        clearTimeout(timeout);\n        clearInterval(leftInterval);\n        resolve();\n      });\n    });\n\n    // Send join message to janus. Don't listen for join/leave messages. Subscribe to the occupant's media.\n    // Janus should send us an offer for this occupant's media in response to this.\n    await this.sendJoin(handle, { media: occupantId });\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after join\");\n      return null;\n    }\n\n    debug(occupantId + \": sub waiting for webrtcup\");\n    await webrtcup;\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancel occupant connection, occupant left during or after webrtcup\");\n      return null;\n    }\n\n    if (webrtcFailed) {\n      conn.close();\n      if (maxRetries > 0) {\n        console.warn(occupantId + \": webrtc up timed out, retrying\");\n        return this.createSubscriber(occupantId, maxRetries - 1);\n      } else {\n        console.warn(occupantId + \": webrtc up timed out\");\n        return null;\n      }\n    }\n\n    if (isSafari && !this._iOSHackDelayedInitialPeer) {\n      // HACK: the first peer on Safari during page load can fail to work if we don't\n      // wait some time before continuing here. See: https://github.com/mozilla/hubs/pull/1692\n      await (new Promise((resolve) => setTimeout(resolve, 3000)));\n      this._iOSHackDelayedInitialPeer = true;\n    }\n\n    var mediaStream = new MediaStream();\n    var receivers = conn.getReceivers();\n    receivers.forEach(receiver => {\n      if (receiver.track) {\n        mediaStream.addTrack(receiver.track);\n      }\n    });\n    if (mediaStream.getTracks().length === 0) {\n      mediaStream = null;\n    }\n\n    debug(occupantId + \": subscriber ready\");\n    return {\n      handle,\n      mediaStream,\n      conn\n    };\n  }\n\n  sendJoin(handle, subscribe) {\n    return handle.sendMessage({\n      kind: \"join\",\n      room_id: this.room,\n      user_id: this.clientId,\n      subscribe,\n      token: this.joinToken\n    });\n  }\n\n  toggleFreeze() {\n    if (this.frozen) {\n      this.unfreeze();\n    } else {\n      this.freeze();\n    }\n  }\n\n  freeze() {\n    this.frozen = true;\n  }\n\n  unfreeze() {\n    this.frozen = false;\n    this.flushPendingUpdates();\n  }\n\n  dataForUpdateMultiMessage(networkId, message) {\n    // \"d\" is an array of entity datas, where each item in the array represents a unique entity and contains\n    // metadata for the entity, and an array of components that have been updated on the entity.\n    // This method finds the data corresponding to the given networkId.\n    for (let i = 0, l = message.data.d.length; i < l; i++) {\n      const data = message.data.d[i];\n\n      if (data.networkId === networkId) {\n        return data;\n      }\n    }\n\n    return null;\n  }\n\n  getPendingData(networkId, message) {\n    if (!message) return null;\n\n    let data = message.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, message) : message.data;\n\n    // Ignore messages relating to users who have disconnected since freezing, their entities\n    // will have aleady been removed by NAF.\n    // Note that delete messages have no \"owner\" so we have to check for that as well.\n    if (data.owner && !this.occupants[data.owner]) return null;\n\n    // Ignore messages from users that we may have blocked while frozen.\n    if (data.owner && this.blockedClients.has(data.owner)) return null;\n\n    return data\n  }\n\n  // Used externally\n  getPendingDataForNetworkId(networkId) {\n    return this.getPendingData(networkId, this.frozenUpdates.get(networkId));\n  }\n\n  flushPendingUpdates() {\n    for (const [networkId, message] of this.frozenUpdates) {\n      let data = this.getPendingData(networkId, message);\n      if (!data) continue;\n\n      // Override the data type on \"um\" messages types, since we extract entity updates from \"um\" messages into\n      // individual frozenUpdates in storeSingleMessage.\n      const dataType = message.dataType === \"um\" ? \"u\" : message.dataType;\n\n      this.onOccupantMessage(null, dataType, data, message.source);\n    }\n    this.frozenUpdates.clear();\n  }\n\n  storeMessage(message) {\n    if (message.dataType === \"um\") { // UpdateMulti\n      for (let i = 0, l = message.data.d.length; i < l; i++) {\n        this.storeSingleMessage(message, i);\n      }\n    } else {\n      this.storeSingleMessage(message);\n    }\n  }\n\n  storeSingleMessage(message, index) {\n    const data = index !== undefined ? message.data.d[index] : message.data;\n    const dataType = message.dataType;\n    const source = message.source;\n\n    const networkId = data.networkId;\n\n    if (!this.frozenUpdates.has(networkId)) {\n      this.frozenUpdates.set(networkId, message);\n    } else {\n      const storedMessage = this.frozenUpdates.get(networkId);\n      const storedData = storedMessage.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, storedMessage) : storedMessage.data;\n\n      // Avoid updating components if the entity data received did not come from the current owner.\n      const isOutdatedMessage = data.lastOwnerTime < storedData.lastOwnerTime;\n      const isContemporaneousMessage = data.lastOwnerTime === storedData.lastOwnerTime;\n      if (isOutdatedMessage || (isContemporaneousMessage && storedData.owner > data.owner)) {\n        return;\n      }\n\n      if (dataType === \"r\") {\n        const createdWhileFrozen = storedData && storedData.isFirstSync;\n        if (createdWhileFrozen) {\n          // If the entity was created and deleted while frozen, don't bother conveying anything to the consumer.\n          this.frozenUpdates.delete(networkId);\n        } else {\n          // Delete messages override any other messages for this entity\n          this.frozenUpdates.set(networkId, message);\n        }\n      } else {\n        // merge in component updates\n        if (storedData.components && data.components) {\n          Object.assign(storedData.components, data.components);\n        }\n      }\n    }\n  }\n\n  onDataChannelMessage(e, source) {\n    this.onData(JSON.parse(e.data), source);\n  }\n\n  onData(message, source) {\n    if (debug.enabled) {\n      debug(`DC in: ${message}`);\n    }\n\n    if (!message.dataType) return;\n\n    message.source = source;\n\n    if (this.frozen) {\n      this.storeMessage(message);\n    } else {\n      this.onOccupantMessage(null, message.dataType, message.data, message.source);\n    }\n  }\n\n  shouldStartConnectionTo(client) {\n    return true;\n  }\n\n  startStreamConnection(client) {}\n\n  closeStreamConnection(client) {}\n\n  getConnectStatus(clientId) {\n    return this.occupants[clientId] ? NAF.adapters.IS_CONNECTED : NAF.adapters.NOT_CONNECTED;\n  }\n\n  async updateTimeOffset() {\n    if (this.isDisconnected()) return;\n\n    const clientSentTime = Date.now();\n\n    const res = await fetch(document.location.href, {\n      method: \"HEAD\",\n      cache: \"no-cache\"\n    });\n\n    const precision = 1000;\n    const serverReceivedTime = new Date(res.headers.get(\"Date\")).getTime() + precision / 2;\n    const clientReceivedTime = Date.now();\n    const serverTime = serverReceivedTime + (clientReceivedTime - clientSentTime) / 2;\n    const timeOffset = serverTime - clientReceivedTime;\n\n    this.serverTimeRequests++;\n\n    if (this.serverTimeRequests <= 10) {\n      this.timeOffsets.push(timeOffset);\n    } else {\n      this.timeOffsets[this.serverTimeRequests % 10] = timeOffset;\n    }\n\n    this.avgTimeOffset = this.timeOffsets.reduce((acc, offset) => (acc += offset), 0) / this.timeOffsets.length;\n\n    if (this.serverTimeRequests > 10) {\n      debug(`new server time offset: ${this.avgTimeOffset}ms`);\n      setTimeout(() => this.updateTimeOffset(), 5 * 60 * 1000); // Sync clock every 5 minutes.\n    } else {\n      this.updateTimeOffset();\n    }\n  }\n\n  getServerTime() {\n    return Date.now() + this.avgTimeOffset;\n  }\n\n  getMediaStream(clientId, type = \"audio\") {\n    if (this.mediaStreams[clientId]) {\n      debug(`Already had ${type} for ${clientId}`);\n      return Promise.resolve(this.mediaStreams[clientId][type]);\n    } else {\n      debug(`Waiting on ${type} for ${clientId}`);\n      if (!this.pendingMediaRequests.has(clientId)) {\n        this.pendingMediaRequests.set(clientId, {});\n\n        const audioPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).audio = { resolve, reject };\n        });\n        const videoPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).video = { resolve, reject };\n        });\n\n        this.pendingMediaRequests.get(clientId).audio.promise = audioPromise;\n        this.pendingMediaRequests.get(clientId).video.promise = videoPromise;\n\n        audioPromise.catch(e => console.warn(`${clientId} getMediaStream Audio Error`, e));\n        videoPromise.catch(e => console.warn(`${clientId} getMediaStream Video Error`, e));\n      }\n      return this.pendingMediaRequests.get(clientId)[type].promise;\n    }\n  }\n\n  setMediaStream(clientId, stream) {\n    // Safari doesn't like it when you use single a mixed media stream where one of the tracks is inactive, so we\n    // split the tracks into two streams.\n    const audioStream = new MediaStream();\n    try {\n    stream.getAudioTracks().forEach(track => audioStream.addTrack(track));\n\n    } catch(e) {\n      console.warn(`${clientId} setMediaStream Audio Error`, e);\n    }\n    const videoStream = new MediaStream();\n    try {\n    stream.getVideoTracks().forEach(track => videoStream.addTrack(track));\n\n    } catch (e) {\n      console.warn(`${clientId} setMediaStream Video Error`, e);\n    }\n\n    this.mediaStreams[clientId] = { audio: audioStream, video: videoStream };\n\n    // Resolve the promise for the user's media stream if it exists.\n    if (this.pendingMediaRequests.has(clientId)) {\n      this.pendingMediaRequests.get(clientId).audio.resolve(audioStream);\n      this.pendingMediaRequests.get(clientId).video.resolve(videoStream);\n    }\n  }\n\n  async setLocalMediaStream(stream) {\n    // our job here is to make sure the connection winds up with RTP senders sending the stuff in this stream,\n    // and not the stuff that isn't in this stream. strategy is to replace existing tracks if we can, add tracks\n    // that we can't replace, and disable tracks that don't exist anymore.\n\n    // note that we don't ever remove a track from the stream -- since Janus doesn't support Unified Plan, we absolutely\n    // can't wind up with a SDP that has >1 audio or >1 video tracks, even if one of them is inactive (what you get if\n    // you remove a track from an existing stream.)\n    if (this.publisher && this.publisher.conn) {\n      const existingSenders = this.publisher.conn.getSenders();\n      const newSenders = [];\n      const tracks = stream.getTracks();\n\n      for (let i = 0; i < tracks.length; i++) {\n        const t = tracks[i];\n        const sender = existingSenders.find(s => s.track != null && s.track.kind == t.kind);\n\n        if (sender != null) {\n          if (sender.replaceTrack) {\n            await sender.replaceTrack(t);\n\n            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1576771\n            if (t.kind === \"video\" && t.enabled && navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n              t.enabled = false;\n              setTimeout(() => t.enabled = true, 1000);\n            }\n          } else {\n            // Fallback for browsers that don't support replaceTrack. At this time of this writing\n            // most browsers support it, and testing this code path seems to not work properly\n            // in Chrome anymore.\n            stream.removeTrack(sender.track);\n            stream.addTrack(t);\n          }\n          newSenders.push(sender);\n        } else {\n          newSenders.push(this.publisher.conn.addTrack(t, stream));\n        }\n      }\n      existingSenders.forEach(s => {\n        if (!newSenders.includes(s)) {\n          s.track.enabled = false;\n        }\n      });\n    }\n    this.localMediaStream = stream;\n    this.setMediaStream(this.clientId, stream);\n  }\n\n  enableMicrophone(enabled) {\n    if (this.publisher && this.publisher.conn) {\n      this.publisher.conn.getSenders().forEach(s => {\n        if (s.track.kind == \"audio\") {\n          s.track.enabled = enabled;\n        }\n      });\n    }\n  }\n\n  sendData(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.unreliableChannel.readyState === \"open\") {\n            this.publisher.unreliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          }\n          break;\n        default:\n          this.unreliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  sendDataGuaranteed(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.reliableChannel.readyState === \"open\") {\n            this.publisher.reliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          }\n          break;\n        default:\n          this.reliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastData(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.unreliableChannel.readyState === \"open\") {\n            this.publisher.unreliableChannel.send(JSON.stringify({ dataType, data }));\n          }\n          break;\n        default:\n          this.unreliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastDataGuaranteed(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          if (this.ws.readyState === 1) { // OPEN\n            this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          }\n          break;\n        case \"datachannel\":\n          if (this.publisher.reliableChannel.readyState === \"open\") {\n            this.publisher.reliableChannel.send(JSON.stringify({ dataType, data }));\n          }\n          break;\n        default:\n          this.reliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  kick(clientId, permsToken) {\n    return this.publisher.handle.sendMessage({ kind: \"kick\", room_id: this.room, user_id: clientId, token: permsToken }).then(() => {\n      document.body.dispatchEvent(new CustomEvent(\"kicked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  block(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"block\", whom: clientId }).then(() => {\n      this.blockedClients.set(clientId, true);\n      document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  unblock(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"unblock\", whom: clientId }).then(() => {\n      this.blockedClients.delete(clientId);\n      document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: clientId } }));\n    });\n  }\n}\n\nNAF.adapters.register(\"janus\", JanusAdapter);\n\nmodule.exports = JanusAdapter;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(497);\n"],"names":["JanusPluginHandle","session","this","id","undefined","JanusSession","output","options","nextTxId","txns","eventHandlers","Object","assign","verbose","timeoutMs","keepaliveMs","prototype","attach","plugin","loop_index","payload","send","then","resp","data","detach","on","ev","callback","signal","sender","type","handle_id","sendMessage","body","sendJsep","jsep","sendTrickle","candidate","create","destroy","dispose","txId","_killKeepalive","hasOwnProperty","txn","clearTimeout","timeout","reject","Error","isError","janus","handlers","push","receive","_logIncoming","session_id","console","warn","responseType","i","length","transaction","resolve","toString","Promise","setTimeout","_transmit","_logOutgoing","JSON","stringify","_resetKeepalive","kind","message","debug","_sendKeepalive","keepaliveTimeout","catch","e","error","module","exports","_regeneratorRuntime","t","r","n","o","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","_next","_throw","key","info","_asyncToGenerator","fn","self","args","arguments","apply","err","_defineProperties","target","props","descriptor","_toPropertyKey","toPrimitive","String","_toPrimitive","mj","require","sendOriginal","indexOf","NAF","connection","adapter","reconnect","sdpUtils","log","isSafari","test","navigator","userAgent","debounce","curr","_this","Array","_","untilDataChannelOpen","dataChannel","readyState","resolver","rejector","clear","removeEventListener","addEventListener","isH264VideoSupported","document","createElement","canPlayType","OPUS_PARAMETERS","usedtx","stereo","DEFAULT_PEER_CONNECTION_CONFIG","iceServers","urls","JanusAdapter","instance","Constructor","_classCallCheck","room","clientId","joinToken","serverUrl","webRtcOptions","peerConnectionConfig","ws","reliableTransport","unreliableTransport","initialReconnectionDelay","Math","random","reconnectionDelay","reconnectionTimeout","maxReconnectionAttempts","reconnectionAttempts","publisher","occupants","leftOccupants","Set","mediaStreams","localMediaStream","pendingMediaRequests","Map","blockedClients","frozenUpdates","timeOffsets","serverTimeRequests","avgTimeOffset","onWebsocketOpen","bind","onWebsocketClose","onWebsocketMessage","onDataChannelMessage","onData","protoProps","_setLocalMediaStream","_updateTimeOffset","_createSubscriber","_fixSafariIceUFrag","_createPublisher","_addOccupant","_onWebsocketOpen","url","app","roomName","successListener","failureListener","connectSuccess","connectFailure","occupantListener","onOccupantsChanged","openListener","closedListener","messageListener","onOccupantConnected","onOccupantDisconnected","onOccupantMessage","reconnectingListener","reconnectedListener","reconnectionErrorListener","onReconnecting","onReconnected","onReconnectionError","loops","_this2","concat","websocketConnection","WebSocket","wsOnOpen","all","updateTimeOffset","removeAllOccupants","conn","close","delayedReconnectTimeout","_callee","addOccupantPromises","occupantId","_context","createPublisher","initialOccupants","addOccupant","event","_this3","code","_this4","disconnect","connect","_this5","parse","_callee2","subscriber","_context2","removeOccupant","createSubscriber","setMediaStream","mediaStream","_x","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","add","has","msg","get","audio","video","_this6","iceConnectionState","performDelayedReconnect","offer","createOffer","configurePublisherSdp","fixSafariIceUFrag","local","setLocalDescription","remote","j","setRemoteDescription","answer","configureSubscriberSdp","createAnswer","_callee3","webrtcup","reliableChannel","unreliableChannel","_this7","_context3","RTCPeerConnection","parseInt","associate","createDataChannel","ordered","maxRetransmits","getTracks","track","addTrack","plugindata","room_id","user_id","dispatchEvent","CustomEvent","detail","by","sendJoin","notifications","success","response","users","includes","sdp","replace","line","pt","parameters","parseFmtp","writeFmtp","payloadType","_callee4","_context4","_x2","_callee5","maxRetries","webrtcFailed","_this8","_args5","_context5","leftInterval","setInterval","clearInterval","media","_iOSHackDelayedInitialPeer","MediaStream","getReceivers","receiver","_x3","subscribe","token","frozen","unfreeze","freeze","flushPendingUpdates","networkId","dataType","dataForUpdateMultiMessage","owner","getPendingData","_step2","_iterator2","_step2$value","source","storeSingleMessage","index","storedMessage","storedData","isOutdatedMessage","lastOwnerTime","isContemporaneousMessage","isFirstSync","set","components","enabled","storeMessage","client","adapters","IS_CONNECTED","NOT_CONNECTED","_callee6","clientSentTime","res","serverReceivedTime","clientReceivedTime","timeOffset","_this9","_context6","isDisconnected","Date","now","fetch","location","href","cache","headers","getTime","precision","reduce","acc","offset","_this10","audioPromise","videoPromise","promise","stream","audioStream","getAudioTracks","videoStream","getVideoTracks","_callee7","existingSenders","newSenders","tracks","_loop","_this11","_context8","getSenders","_context7","find","replaceTrack","toLowerCase","removeTrack","_x4","whom","permsToken","_this12","_this13","register","SDPUtils","substring","localCName","generateIdentifier","splitLines","blob","trim","split","map","splitSections","part","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","parseCandidate","parts","foundation","component","protocol","priority","ip","address","port","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","direction","uri","attributes","writeExtmap","headerExtension","preferredId","kv","params","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","profile","rtpmapline","fmtps","wildcardRtcpFb","existingFeedback","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","obj","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","substr","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}