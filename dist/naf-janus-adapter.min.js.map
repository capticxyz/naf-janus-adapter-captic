{"version":3,"file":"naf-janus-adapter.min.js","mappings":"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","sources":["webpack://@networked-aframe/naf-janus-adapter/./node_modules/@networked-aframe/minijanus/minijanus.js","webpack://@networked-aframe/naf-janus-adapter/./src/index.js","webpack://@networked-aframe/naf-janus-adapter/./node_modules/sdp/sdp.js","webpack://@networked-aframe/naf-janus-adapter/webpack/bootstrap","webpack://@networked-aframe/naf-janus-adapter/webpack/startup"],"sourcesContent":["/**\n * Represents a handle to a single Janus plugin on a Janus session. Each WebRTC connection to the Janus server will be\n * associated with a single handle. Once attached to the server, this handle will be given a unique ID which should be\n * used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#handles.\n **/\nfunction JanusPluginHandle(session) {\n  this.session = session;\n  this.id = undefined;\n}\n\n/** Attaches this handle to the Janus server and sets its ID. **/\nJanusPluginHandle.prototype.attach = function(plugin, loop_index) {\n  var payload = { plugin: plugin, loop_index: loop_index, \"force-bundle\": true, \"force-rtcp-mux\": true };\n  return this.session.send(\"attach\", payload).then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/** Detaches this handle. **/\nJanusPluginHandle.prototype.detach = function() {\n  return this.send(\"detach\");\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this plugin handle with the\n * `janus` attribute equal to `ev`.\n **/\nJanusPluginHandle.prototype.on = function(ev, callback) {\n  return this.session.on(ev, signal => {\n    if (signal.sender == this.id) {\n      callback(signal);\n    }\n  });\n};\n\n/**\n * Sends a signal associated with this handle. Signals should be JSON-serializable objects. Returns a promise that will\n * be resolved or rejected when a response to this signal is received, or when no response is received within the\n * session timeout.\n **/\nJanusPluginHandle.prototype.send = function(type, signal) {\n  return this.session.send(type, Object.assign({ handle_id: this.id }, signal));\n};\n\n/** Sends a plugin-specific message associated with this handle. **/\nJanusPluginHandle.prototype.sendMessage = function(body) {\n  return this.send(\"message\", { body: body });\n};\n\n/** Sends a JSEP offer or answer associated with this handle. **/\nJanusPluginHandle.prototype.sendJsep = function(jsep) {\n  return this.send(\"message\", { body: {}, jsep: jsep });\n};\n\n/** Sends an ICE trickle candidate associated with this handle. **/\nJanusPluginHandle.prototype.sendTrickle = function(candidate) {\n  return this.send(\"trickle\", { candidate: candidate });\n};\n\n/**\n * Represents a Janus session -- a Janus context from within which you can open multiple handles and connections. Once\n * created, this session will be given a unique ID which should be used to associate it with future signalling messages.\n *\n * See https://janus.conf.meetecho.com/docs/rest.html#sessions.\n **/\nfunction JanusSession(output, options) {\n  this.output = output;\n  this.id = undefined;\n  this.nextTxId = 0;\n  this.txns = {};\n  this.eventHandlers = {};\n  this.options = Object.assign({\n    verbose: false,\n    timeoutMs: 10000,\n    keepaliveMs: 30000\n  }, options);\n}\n\n/** Creates this session on the Janus server and sets its ID. **/\nJanusSession.prototype.create = function() {\n  return this.send(\"create\").then(resp => {\n    this.id = resp.data.id;\n    return resp;\n  });\n};\n\n/**\n * Destroys this session. Note that upon destruction, Janus will also close the signalling transport (if applicable) and\n * any open WebRTC connections.\n **/\nJanusSession.prototype.destroy = function() {\n  return this.send(\"destroy\").then((resp) => {\n    this.dispose();\n    return resp;\n  });\n};\n\n/**\n * Disposes of this session in a way such that no further incoming signalling messages will be processed.\n * Outstanding transactions will be rejected.\n **/\nJanusSession.prototype.dispose = function() {\n  this._killKeepalive();\n  this.eventHandlers = {};\n  for (var txId in this.txns) {\n    if (this.txns.hasOwnProperty(txId)) {\n      var txn = this.txns[txId];\n      clearTimeout(txn.timeout);\n      txn.reject(new Error(\"Janus session was disposed.\"));\n      delete this.txns[txId];\n    }\n  }\n};\n\n/**\n * Whether this signal represents an error, and the associated promise (if any) should be rejected.\n * Users should override this to handle any custom plugin-specific error conventions.\n **/\nJanusSession.prototype.isError = function(signal) {\n  return signal.janus === \"error\";\n};\n\n/** Registers a callback to be fired upon the reception of any incoming Janus signals for this session with the\n * `janus` attribute equal to `ev`.\n **/\nJanusSession.prototype.on = function(ev, callback) {\n  var handlers = this.eventHandlers[ev];\n  if (handlers == null) {\n    handlers = this.eventHandlers[ev] = [];\n  }\n  handlers.push(callback);\n};\n\n/**\n * Callback for receiving JSON signalling messages pertinent to this session. If the signals are responses to previously\n * sent signals, the promises for the outgoing signals will be resolved or rejected appropriately with this signal as an\n * argument.\n *\n * External callers should call this function every time a new signal arrives on the transport; for example, in a\n * WebSocket's `message` event, or when a new datum shows up in an HTTP long-polling response.\n **/\nJanusSession.prototype.receive = function(signal) {\n  if (this.options.verbose) {\n    this._logIncoming(signal);\n  }\n  if (signal.session_id != this.id) {\n    console.warn(\"Incorrect session ID received in Janus signalling message: was \" + signal.session_id + \", expected \" + this.id + \".\");\n  }\n\n  var responseType = signal.janus;\n  var handlers = this.eventHandlers[responseType];\n  if (handlers != null) {\n    for (var i = 0; i < handlers.length; i++) {\n      handlers[i](signal);\n    }\n  }\n\n  if (signal.transaction != null) {\n    var txn = this.txns[signal.transaction];\n    if (txn == null) {\n      // this is a response to a transaction that wasn't caused via JanusSession.send, or a plugin replied twice to a\n      // single request, or the session was disposed, or something else that isn't under our purview; that's fine\n      return;\n    }\n\n    if (responseType === \"ack\" && txn.type == \"message\") {\n      // this is an ack of an asynchronously-processed plugin request, we should wait to resolve the promise until the\n      // actual response comes in\n      return;\n    }\n\n    clearTimeout(txn.timeout);\n\n    delete this.txns[signal.transaction];\n    (this.isError(signal) ? txn.reject : txn.resolve)(signal);\n  }\n};\n\n/**\n * Sends a signal associated with this session, beginning a new transaction. Returns a promise that will be resolved or\n * rejected when a response is received in the same transaction, or when no response is received within the session\n * timeout.\n **/\nJanusSession.prototype.send = function(type, signal) {\n  signal = Object.assign({ transaction: (this.nextTxId++).toString() }, signal);\n  return new Promise((resolve, reject) => {\n    var timeout = null;\n    if (this.options.timeoutMs) {\n      timeout = setTimeout(() => {\n        delete this.txns[signal.transaction];\n        reject(new Error(\"Signalling transaction with txid \" + signal.transaction + \" timed out.\"));\n      }, this.options.timeoutMs);\n    }\n    this.txns[signal.transaction] = { resolve: resolve, reject: reject, timeout: timeout, type: type };\n    this._transmit(type, signal);\n  });\n};\n\nJanusSession.prototype._transmit = function(type, signal) {\n  signal = Object.assign({ janus: type }, signal);\n\n  if (this.id != null) { // this.id is undefined in the special case when we're sending the session create message\n    signal = Object.assign({ session_id: this.id }, signal);\n  }\n\n  if (this.options.verbose) {\n    this._logOutgoing(signal);\n  }\n\n  this.output(JSON.stringify(signal));\n  this._resetKeepalive();\n};\n\nJanusSession.prototype._logOutgoing = function(signal) {\n  var kind = signal.janus;\n  if (kind === \"message\" && signal.jsep) {\n    kind = signal.jsep.type;\n  }\n  var message = \"> Outgoing Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \";\n  console.debug(\"%c\" + message, \"color: #040\", signal);\n};\n\nJanusSession.prototype._logIncoming = function(signal) {\n  var kind = signal.janus;\n  var message = signal.transaction ?\n      \"< Incoming Janus \" + (kind || \"signal\") + \" (#\" + signal.transaction + \"): \" :\n      \"< Incoming Janus \" + (kind || \"signal\") + \": \";\n  console.debug(\"%c\" + message, \"color: #004\", signal);\n};\n\nJanusSession.prototype._sendKeepalive = function() {\n  return this.send(\"keepalive\");\n};\n\nJanusSession.prototype._killKeepalive = function() {\n  clearTimeout(this.keepaliveTimeout);\n};\n\nJanusSession.prototype._resetKeepalive = function() {\n  this._killKeepalive();\n  if (this.options.keepaliveMs) {\n    this.keepaliveTimeout = setTimeout(() => {\n      this._sendKeepalive().catch(e => console.error(\"Error received from keepalive: \", e));\n    }, this.options.keepaliveMs);\n  }\n};\n\nmodule.exports = {\n  JanusPluginHandle,\n  JanusSession\n};\n","/* global NAF */\nvar mj = require(\"@networked-aframe/minijanus\");\nmj.JanusSession.prototype.sendOriginal = mj.JanusSession.prototype.send;\nmj.JanusSession.prototype.send = function(type, signal) {\n  return this.sendOriginal(type, signal).catch((e) => {\n    if (e.message && e.message.indexOf(\"timed out\") > -1) {\n      console.error(\"web socket timed out\");\n      NAF.connection.adapter.reconnect();\n    } else {\n      throw(e);\n    }\n  });\n}\n\nvar sdpUtils = require(\"sdp\");\n//var debug = require(\"debug\")(\"naf-janus-adapter:debug\");\n//var warn = require(\"debug\")(\"naf-janus-adapter:warn\");\n//var error = require(\"debug\")(\"naf-janus-adapter:error\");\nvar debug = console.log;\nvar warn = console.warn;\nvar error = console.error;\nvar isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\nconst SUBSCRIBE_TIMEOUT_MS = 15000;\n\nfunction debounce(fn) {\n  var curr = Promise.resolve();\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    curr = curr.then(_ => fn.apply(this, args));\n  };\n}\n\nfunction randomUint() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nfunction untilDataChannelOpen(dataChannel) {\n  return new Promise((resolve, reject) => {\n    if (dataChannel.readyState === \"open\") {\n      resolve();\n    } else {\n      let resolver, rejector;\n\n      const clear = () => {\n        dataChannel.removeEventListener(\"open\", resolver);\n        dataChannel.removeEventListener(\"error\", rejector);\n      };\n\n      resolver = () => {\n        clear();\n        resolve();\n      };\n      rejector = () => {\n        clear();\n        reject();\n      };\n\n      dataChannel.addEventListener(\"open\", resolver);\n      dataChannel.addEventListener(\"error\", rejector);\n    }\n  });\n}\n\nconst isH264VideoSupported = (() => {\n  const video = document.createElement(\"video\");\n  return video.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"') !== \"\";\n})();\n\nconst OPUS_PARAMETERS = {\n  // indicates that we want to enable DTX to elide silence packets\n  usedtx: 1,\n  // indicates that we prefer to receive mono audio (important for voip profile)\n  stereo: 0,\n  // indicates that we prefer to send mono audio (important for voip profile)\n  \"sprop-stereo\": 0\n};\n\nconst DEFAULT_PEER_CONNECTION_CONFIG = {\n  iceServers: [{ urls: \"stun:stun1.l.google.com:19302\" }, { urls: \"stun:stun2.l.google.com:19302\" }]\n};\n\nconst WS_NORMAL_CLOSURE = 1000;\n\nclass JanusAdapter {\n  constructor() {\n    this.room = null;\n    // We expect the consumer to set a client id before connecting.\n    this.clientId = null;\n    this.joinToken = null;\n\n    this.serverUrl = null;\n    this.webRtcOptions = {};\n    this.peerConnectionConfig = null;\n    this.ws = null;\n    this.session = null;\n    this.reliableTransport = \"datachannel\";\n    this.unreliableTransport = \"datachannel\";\n\n    // In the event the server restarts and all clients lose connection, reconnect with\n    // some random jitter added to prevent simultaneous reconnection requests.\n    this.initialReconnectionDelay = 1000 * Math.random();\n    this.reconnectionDelay = this.initialReconnectionDelay;\n    this.reconnectionTimeout = null;\n    this.maxReconnectionAttempts = 10;\n    this.reconnectionAttempts = 0;\n\n    this.publisher = null;\n    this.occupants = {};\n    this.leftOccupants = new Set();\n    this.mediaStreams = {};\n    this.localMediaStream = null;\n    this.pendingMediaRequests = new Map();\n\n    this.blockedClients = new Map();\n    this.frozenUpdates = new Map();\n\n    this.timeOffsets = [];\n    this.serverTimeRequests = 0;\n    this.avgTimeOffset = 0;\n\n    this.onWebsocketOpen = this.onWebsocketOpen.bind(this);\n    this.onWebsocketClose = this.onWebsocketClose.bind(this);\n    this.onWebsocketMessage = this.onWebsocketMessage.bind(this);\n    this.onDataChannelMessage = this.onDataChannelMessage.bind(this);\n    this.onData = this.onData.bind(this);\n  }\n\n  setServerUrl(url) {\n    this.serverUrl = url;\n  }\n\n  setApp(app) {}\n\n  setRoom(roomName) {\n    this.room = roomName;\n  }\n\n  setJoinToken(joinToken) {\n    this.joinToken = joinToken;\n  }\n\n  setClientId(clientId) {\n    this.clientId = clientId;\n  }\n\n  setWebRtcOptions(options) {\n    this.webRtcOptions = options;\n  }\n\n  setPeerConnectionConfig(peerConnectionConfig) {\n    this.peerConnectionConfig = peerConnectionConfig;\n  }\n\n  setServerConnectListeners(successListener, failureListener) {\n    this.connectSuccess = successListener;\n    this.connectFailure = failureListener;\n  }\n\n  setRoomOccupantListener(occupantListener) {\n    this.onOccupantsChanged = occupantListener;\n  }\n\n  setDataChannelListeners(openListener, closedListener, messageListener) {\n    this.onOccupantConnected = openListener;\n    this.onOccupantDisconnected = closedListener;\n    this.onOccupantMessage = messageListener;\n  }\n\n  setReconnectionListeners(reconnectingListener, reconnectedListener, reconnectionErrorListener) {\n    // onReconnecting is called with the number of milliseconds until the next reconnection attempt\n    this.onReconnecting = reconnectingListener;\n    // onReconnected is called when the connection has been reestablished\n    this.onReconnected = reconnectedListener;\n    // onReconnectionError is called with an error when maxReconnectionAttempts has been reached\n    this.onReconnectionError = reconnectionErrorListener;\n  }\n\n  setEventLoops(loops) {\n    this.loops = loops;\n  }\n\n  connect() {\n    debug(`connecting to ${this.serverUrl}`);\n\n    const websocketConnection = new Promise((resolve, reject) => {\n      this.ws = new WebSocket(this.serverUrl, \"janus-protocol\");\n\n      this.session = new mj.JanusSession(this.ws.send.bind(this.ws), { timeoutMs: 40000 });\n\n      this.ws.addEventListener(\"close\", this.onWebsocketClose);\n      this.ws.addEventListener(\"message\", this.onWebsocketMessage);\n\n      this.wsOnOpen = () => {\n        this.ws.removeEventListener(\"open\", this.wsOnOpen);\n        this.onWebsocketOpen()\n          .then(resolve)\n          .catch(reject);\n      };\n\n      this.ws.addEventListener(\"open\", this.wsOnOpen);\n    });\n\n    return Promise.all([websocketConnection, this.updateTimeOffset()]);\n  }\n\n  disconnect() {\n    debug(`disconnecting`);\n\n    clearTimeout(this.reconnectionTimeout);\n\n    this.removeAllOccupants();\n    this.leftOccupants = new Set();\n\n    if (this.publisher) {\n      // Close the publisher peer connection. Which also detaches the plugin handle.\n      this.publisher.conn.close();\n      this.publisher = null;\n    }\n\n    if (this.session) {\n      this.session.dispose();\n      this.session = null;\n    }\n\n    if (this.ws) {\n      this.ws.removeEventListener(\"open\", this.wsOnOpen);\n      this.ws.removeEventListener(\"close\", this.onWebsocketClose);\n      this.ws.removeEventListener(\"message\", this.onWebsocketMessage);\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Now that all RTCPeerConnection closed, be sure to not call\n    // reconnect() again via performDelayedReconnect if previous\n    // RTCPeerConnection was in the failed state.\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n      this.delayedReconnectTimeout = null;\n    }\n  }\n\n  isDisconnected() {\n    return this.ws === null;\n  }\n\n  async onWebsocketOpen() {\n    // Create the Janus Session\n    await this.session.create();\n\n    // Attach the SFU Plugin and create a RTCPeerConnection for the publisher.\n    // The publisher sends audio and opens two bidirectional data channels.\n    // One reliable datachannel and one unreliable.\n    this.publisher = await this.createPublisher();\n\n    // Call the naf connectSuccess callback before we start receiving WebRTC messages.\n    this.connectSuccess(this.clientId);\n\n    const addOccupantPromises = [];\n\n    for (let i = 0; i < this.publisher.initialOccupants.length; i++) {\n      const occupantId = this.publisher.initialOccupants[i];\n      if (occupantId === this.clientId) continue; // Happens during non-graceful reconnects due to zombie sessions\n      addOccupantPromises.push(this.addOccupant(occupantId));\n    }\n\n    await Promise.all(addOccupantPromises);\n  }\n\n  onWebsocketClose(event) {\n    // The connection was closed successfully. Don't try to reconnect.\n    if (event.code === WS_NORMAL_CLOSURE) {\n      return;\n    }\n\n    console.warn(\"Janus websocket closed unexpectedly.\");\n    if (this.onReconnecting) {\n      this.onReconnecting(this.reconnectionDelay);\n    }\n\n    this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n  }\n\n  reconnect() {\n    // Dispose of all networked entities and other resources tied to the session.\n    this.disconnect();\n\n    this.connect()\n      .then(() => {\n        this.reconnectionDelay = this.initialReconnectionDelay;\n        this.reconnectionAttempts = 0;\n\n        if (this.onReconnected) {\n          this.onReconnected();\n        }\n      })\n      .catch(error => {\n        this.reconnectionDelay += 1000;\n        this.reconnectionAttempts++;\n\n        if (this.reconnectionAttempts > this.maxReconnectionAttempts && this.onReconnectionError) {\n          return this.onReconnectionError(\n            new Error(\"Connection could not be reestablished, exceeded maximum number of reconnection attempts.\")\n          );\n        }\n\n        console.warn(\"Error during reconnect, retrying.\");\n        console.warn(error);\n\n        if (this.onReconnecting) {\n          this.onReconnecting(this.reconnectionDelay);\n        }\n\n        this.reconnectionTimeout = setTimeout(() => this.reconnect(), this.reconnectionDelay);\n      });\n  }\n\n  performDelayedReconnect() {\n    if (this.delayedReconnectTimeout) {\n      clearTimeout(this.delayedReconnectTimeout);\n    }\n\n    this.delayedReconnectTimeout = setTimeout(() => {\n      this.delayedReconnectTimeout = null;\n      this.reconnect();\n    }, 10000);\n  }\n\n  onWebsocketMessage(event) {\n    this.session.receive(JSON.parse(event.data));\n  }\n\n  async addOccupant(occupantId) {\n    if (this.occupants[occupantId]) {\n      this.removeOccupant(occupantId);\n    }\n\n    this.leftOccupants.delete(occupantId);\n\n    var subscriber = await this.createSubscriber(occupantId);\n\n    if (!subscriber) return;\n\n    this.occupants[occupantId] = subscriber;\n\n    this.setMediaStream(occupantId, subscriber.mediaStream);\n\n    // Call the Networked AFrame callbacks for the new occupant.\n    this.onOccupantConnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n\n    return subscriber;\n  }\n\n  removeAllOccupants() {\n    for (const occupantId of Object.getOwnPropertyNames(this.occupants)) {\n      this.removeOccupant(occupantId);\n    }\n  }\n\n  removeOccupant(occupantId) {\n    this.leftOccupants.add(occupantId);\n\n    if (this.occupants[occupantId]) {\n      // Close the subscriber peer connection. Which also detaches the plugin handle.\n      this.occupants[occupantId].conn.close();\n      delete this.occupants[occupantId];\n    }\n\n    if (this.mediaStreams[occupantId]) {\n      delete this.mediaStreams[occupantId];\n    }\n\n    if (this.pendingMediaRequests.has(occupantId)) {\n      const msg = \"The user disconnected before the media stream was resolved.\";\n      this.pendingMediaRequests.get(occupantId).audio.reject(msg);\n      this.pendingMediaRequests.get(occupantId).video.reject(msg);\n      this.pendingMediaRequests.delete(occupantId);\n    }\n\n    // Call the Networked AFrame callbacks for the removed occupant.\n    this.onOccupantDisconnected(occupantId);\n    this.onOccupantsChanged(this.occupants);\n  }\n\n  associate(conn, handle) {\n    conn.addEventListener(\"icecandidate\", ev => {\n      handle.sendTrickle(ev.candidate || null).catch(e => error(\"Error trickling ICE: %o\", e));\n    });\n    conn.addEventListener(\"iceconnectionstatechange\", ev => {\n      if (conn.iceConnectionState === \"connected\") {\n        console.log(\"ICE state changed to connected\");\n      }\n      if (conn.iceConnectionState === \"disconnected\") {\n        console.warn(\"ICE state changed to disconnected\");\n      }\n      if (conn.iceConnectionState === \"failed\") {\n        console.warn(\"ICE failure detected. Reconnecting in 10s.\");\n        this.performDelayedReconnect();\n      }\n    })\n\n    // we have to debounce these because janus gets angry if you send it a new SDP before\n    // it's finished processing an existing SDP. in actuality, it seems like this is maybe\n    // too liberal and we need to wait some amount of time after an offer before sending another,\n    // but we don't currently know any good way of detecting exactly how long :(\n    conn.addEventListener(\n      \"negotiationneeded\",\n      debounce(ev => {\n        debug(\"Sending new offer for handle: %o\", handle);\n        var offer = conn.createOffer().then(this.configurePublisherSdp).then(this.fixSafariIceUFrag);\n        var local = offer.then(o => conn.setLocalDescription(o));\n        var remote = offer;\n\n        remote = remote\n          .then(this.fixSafariIceUFrag)\n          .then(j => handle.sendJsep(j))\n          .then(r => conn.setRemoteDescription(r.jsep));\n        return Promise.all([local, remote]).catch(e => error(\"Error negotiating offer: %o\", e));\n      })\n    );\n    handle.on(\n      \"event\",\n      debounce(ev => {\n        var jsep = ev.jsep;\n        if (jsep && jsep.type == \"offer\") {\n          debug(\"Accepting new offer for handle: %o\", handle);\n          var answer = conn\n            .setRemoteDescription(this.configureSubscriberSdp(jsep))\n            .then(_ => conn.createAnswer())\n            .then(this.fixSafariIceUFrag);\n          var local = answer.then(a => conn.setLocalDescription(a));\n          var remote = answer.then(j => handle.sendJsep(j));\n          return Promise.all([local, remote]).catch(e => error(\"Error negotiating answer: %o\", e));\n        } else {\n          // some other kind of event, nothing to do\n          return null;\n        }\n      })\n    );\n  }\n\n  async createPublisher() {\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(\"pub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops && this.clientId ? parseInt(this.clientId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(\"pub waiting for data channels & webrtcup\");\n    var webrtcup = new Promise(resolve => handle.on(\"webrtcup\", resolve));\n\n    // Unreliable datachannel: sending and receiving component updates.\n    // Reliable datachannel: sending and recieving entity instantiations.\n    var reliableChannel = conn.createDataChannel(\"reliable\", { ordered: true });\n    var unreliableChannel = conn.createDataChannel(\"unreliable\", {\n      ordered: false,\n      maxRetransmits: 0\n    });\n\n    reliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-reliable\"));\n    unreliableChannel.addEventListener(\"message\", e => this.onDataChannelMessage(e, \"janus-unreliable\"));\n\n    await webrtcup;\n    await untilDataChannelOpen(reliableChannel);\n    await untilDataChannelOpen(unreliableChannel);\n\n    // doing this here is sort of a hack around chrome renegotiation weirdness --\n    // if we do it prior to webrtcup, chrome on gear VR will sometimes put a\n    // renegotiation offer in flight while the first offer was still being\n    // processed by janus. we should find some more principled way to figure out\n    // when janus is done in the future.\n    if (this.localMediaStream) {\n      this.localMediaStream.getTracks().forEach(track => {\n        conn.addTrack(track, this.localMediaStream);\n      });\n    }\n\n    // Handle all of the join and leave events.\n    handle.on(\"event\", ev => {\n      var data = ev.plugindata.data;\n      if (data.event == \"join\" && data.room_id == this.room) {\n        if (this.delayedReconnectTimeout) {\n          // Don't create a new RTCPeerConnection, all RTCPeerConnection will be closed in less than 10s.\n          return;\n        }\n        this.addOccupant(data.user_id);\n      } else if (data.event == \"leave\" && data.room_id == this.room) {\n        this.removeOccupant(data.user_id);\n      } else if (data.event == \"blocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: data.by } }));\n      } else if (data.event == \"unblocked\") {\n        document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: data.by } }));\n      } else if (data.event === \"data\") {\n        this.onData(JSON.parse(data.body), \"janus-event\");\n      }\n    });\n\n    debug(\"pub waiting for join\");\n\n    // Send join message to janus. Listen for join/leave messages. Automatically subscribe to all users' WebRTC data.\n    var message = await this.sendJoin(handle, {\n      notifications: true,\n      data: true\n    });\n\n    if (!message.plugindata.data.success) {\n      const err = message.plugindata.data.error;\n      console.error(err);\n      // We may get here because of an expired JWT.\n      // Close the connection ourself otherwise janus will close it after\n      // session_timeout because we didn't send any keepalive and this will\n      // trigger a delayed reconnect because of the iceconnectionstatechange\n      // listener for failure state.\n      // Even if the app code calls disconnect in case of error, disconnect\n      // won't close the peer connection because this.publisher is not set.\n      conn.close();\n      throw err;\n    }\n\n    var initialOccupants = message.plugindata.data.response.users[this.room] || [];\n\n    if (initialOccupants.includes(this.clientId)) {\n      console.warn(\"Janus still has previous session for this client. Reconnecting in 10s.\");\n      this.performDelayedReconnect();\n    }\n\n    debug(\"publisher ready\");\n    return {\n      handle,\n      initialOccupants,\n      reliableChannel,\n      unreliableChannel,\n      conn\n    };\n  }\n\n  configurePublisherSdp(jsep) {\n    jsep.sdp = jsep.sdp.replace(/a=fmtp:(109|111).*\\r\\n/g, (line, pt) => {\n      const parameters = Object.assign(sdpUtils.parseFmtp(line), OPUS_PARAMETERS);\n      return sdpUtils.writeFmtp({ payloadType: pt, parameters: parameters });\n    });\n    return jsep;\n  }\n\n  configureSubscriberSdp(jsep) {\n    // todo: consider cleaning up these hacks to use sdputils\n    if (!isH264VideoSupported) {\n      if (navigator.userAgent.indexOf(\"HeadlessChrome\") !== -1) {\n        // HeadlessChrome (e.g. puppeteer) doesn't support webrtc video streams, so we remove those lines from the SDP.\n        jsep.sdp = jsep.sdp.replace(/m=video[^]*m=/, \"m=\");\n      }\n    }\n\n    // TODO: Hack to get video working on Chrome for Android. https://groups.google.com/forum/#!topic/mozilla.dev.media/Ye29vuMTpo8\n    if (navigator.userAgent.indexOf(\"Android\") === -1) {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\\r\\n\"\n      );\n    } else {\n      jsep.sdp = jsep.sdp.replace(\n        \"a=rtcp-fb:107 goog-remb\\r\\n\",\n        \"a=rtcp-fb:107 goog-remb\\r\\na=rtcp-fb:107 transport-cc\\r\\na=fmtp:107 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\\r\\n\"\n      );\n    }\n    return jsep;\n  }\n\n  async fixSafariIceUFrag(jsep) {\n    // Safari produces a \\n instead of an \\r\\n for the ice-ufrag. See https://github.com/meetecho/janus-gateway/issues/1818\n    jsep.sdp = jsep.sdp.replace(/[^\\r]\\na=ice-ufrag/g, \"\\r\\na=ice-ufrag\");\n    return jsep\n  }\n\n  async createSubscriber(occupantId, maxRetries = 5) {\n    if (this.leftOccupants.has(occupantId)) {\n      console.warn(occupantId + \": cancelled occupant connection, occupant left before subscription negotation.\");\n      return null;\n    }\n\n    var handle = new mj.JanusPluginHandle(this.session);\n    var conn = new RTCPeerConnection(this.peerConnectionConfig || DEFAULT_PEER_CONNECTION_CONFIG);\n\n    debug(occupantId + \": sub waiting for sfu\");\n    await handle.attach(\"janus.plugin.sfu\", this.loops ? parseInt(occupantId) % this.loops : undefined);\n\n    this.associate(conn, handle);\n\n    debug(occupantId + \": sub waiting for join\");\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after attach\");\n      return null;\n    }\n\n    let webrtcFailed = false;\n\n    const webrtcup = new Promise(resolve => {\n      const leftInterval = setInterval(() => {\n        if (this.leftOccupants.has(occupantId)) {\n          clearInterval(leftInterval);\n          resolve();\n        }\n      }, 1000);\n\n      const timeout = setTimeout(() => {\n        clearInterval(leftInterval);\n        webrtcFailed = true;\n        resolve();\n      }, SUBSCRIBE_TIMEOUT_MS);\n\n      handle.on(\"webrtcup\", () => {\n        clearTimeout(timeout);\n        clearInterval(leftInterval);\n        resolve();\n      });\n    });\n\n    // Send join message to janus. Don't listen for join/leave messages. Subscribe to the occupant's media.\n    // Janus should send us an offer for this occupant's media in response to this.\n    await this.sendJoin(handle, { media: occupantId });\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancelled occupant connection, occupant left after join\");\n      return null;\n    }\n\n    debug(occupantId + \": sub waiting for webrtcup\");\n    await webrtcup;\n\n    if (this.leftOccupants.has(occupantId)) {\n      conn.close();\n      console.warn(occupantId + \": cancel occupant connection, occupant left during or after webrtcup\");\n      return null;\n    }\n\n    if (webrtcFailed) {\n      conn.close();\n      if (maxRetries > 0) {\n        console.warn(occupantId + \": webrtc up timed out, retrying\");\n        return this.createSubscriber(occupantId, maxRetries - 1);\n      } else {\n        console.warn(occupantId + \": webrtc up timed out\");\n        return null;\n      }\n    }\n\n    if (isSafari && !this._iOSHackDelayedInitialPeer) {\n      // HACK: the first peer on Safari during page load can fail to work if we don't\n      // wait some time before continuing here. See: https://github.com/mozilla/hubs/pull/1692\n      await (new Promise((resolve) => setTimeout(resolve, 3000)));\n      this._iOSHackDelayedInitialPeer = true;\n    }\n\n    var mediaStream = new MediaStream();\n    var receivers = conn.getReceivers();\n    receivers.forEach(receiver => {\n      if (receiver.track) {\n        mediaStream.addTrack(receiver.track);\n      }\n    });\n    if (mediaStream.getTracks().length === 0) {\n      mediaStream = null;\n    }\n\n    debug(occupantId + \": subscriber ready\");\n    return {\n      handle,\n      mediaStream,\n      conn\n    };\n  }\n\n  sendJoin(handle, subscribe) {\n    return handle.sendMessage({\n      kind: \"join\",\n      room_id: this.room,\n      user_id: this.clientId,\n      subscribe,\n      token: this.joinToken\n    });\n  }\n\n  toggleFreeze() {\n    if (this.frozen) {\n      this.unfreeze();\n    } else {\n      this.freeze();\n    }\n  }\n\n  freeze() {\n    this.frozen = true;\n  }\n\n  unfreeze() {\n    this.frozen = false;\n    this.flushPendingUpdates();\n  }\n\n  dataForUpdateMultiMessage(networkId, message) {\n    // \"d\" is an array of entity datas, where each item in the array represents a unique entity and contains\n    // metadata for the entity, and an array of components that have been updated on the entity.\n    // This method finds the data corresponding to the given networkId.\n    for (let i = 0, l = message.data.d.length; i < l; i++) {\n      const data = message.data.d[i];\n\n      if (data.networkId === networkId) {\n        return data;\n      }\n    }\n\n    return null;\n  }\n\n  getPendingData(networkId, message) {\n    if (!message) return null;\n\n    let data = message.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, message) : message.data;\n\n    // Ignore messages relating to users who have disconnected since freezing, their entities\n    // will have aleady been removed by NAF.\n    // Note that delete messages have no \"owner\" so we have to check for that as well.\n    if (data.owner && !this.occupants[data.owner]) return null;\n\n    // Ignore messages from users that we may have blocked while frozen.\n    if (data.owner && this.blockedClients.has(data.owner)) return null;\n\n    return data\n  }\n\n  // Used externally\n  getPendingDataForNetworkId(networkId) {\n    return this.getPendingData(networkId, this.frozenUpdates.get(networkId));\n  }\n\n  flushPendingUpdates() {\n    for (const [networkId, message] of this.frozenUpdates) {\n      let data = this.getPendingData(networkId, message);\n      if (!data) continue;\n\n      // Override the data type on \"um\" messages types, since we extract entity updates from \"um\" messages into\n      // individual frozenUpdates in storeSingleMessage.\n      const dataType = message.dataType === \"um\" ? \"u\" : message.dataType;\n\n      this.onOccupantMessage(null, dataType, data, message.source);\n    }\n    this.frozenUpdates.clear();\n  }\n\n  storeMessage(message) {\n    if (message.dataType === \"um\") { // UpdateMulti\n      for (let i = 0, l = message.data.d.length; i < l; i++) {\n        this.storeSingleMessage(message, i);\n      }\n    } else {\n      this.storeSingleMessage(message);\n    }\n  }\n\n  storeSingleMessage(message, index) {\n    const data = index !== undefined ? message.data.d[index] : message.data;\n    const dataType = message.dataType;\n    const source = message.source;\n\n    const networkId = data.networkId;\n\n    if (!this.frozenUpdates.has(networkId)) {\n      this.frozenUpdates.set(networkId, message);\n    } else {\n      const storedMessage = this.frozenUpdates.get(networkId);\n      const storedData = storedMessage.dataType === \"um\" ? this.dataForUpdateMultiMessage(networkId, storedMessage) : storedMessage.data;\n\n      // Avoid updating components if the entity data received did not come from the current owner.\n      const isOutdatedMessage = data.lastOwnerTime < storedData.lastOwnerTime;\n      const isContemporaneousMessage = data.lastOwnerTime === storedData.lastOwnerTime;\n      if (isOutdatedMessage || (isContemporaneousMessage && storedData.owner > data.owner)) {\n        return;\n      }\n\n      if (dataType === \"r\") {\n        const createdWhileFrozen = storedData && storedData.isFirstSync;\n        if (createdWhileFrozen) {\n          // If the entity was created and deleted while frozen, don't bother conveying anything to the consumer.\n          this.frozenUpdates.delete(networkId);\n        } else {\n          // Delete messages override any other messages for this entity\n          this.frozenUpdates.set(networkId, message);\n        }\n      } else {\n        // merge in component updates\n        if (storedData.components && data.components) {\n          Object.assign(storedData.components, data.components);\n        }\n      }\n    }\n  }\n\n  onDataChannelMessage(e, source) {\n    this.onData(JSON.parse(e.data), source);\n  }\n\n  onData(message, source) {\n    if (debug.enabled) {\n      debug(`DC in: ${message}`);\n    }\n\n    if (!message.dataType) return;\n\n    message.source = source;\n\n    if (this.frozen) {\n      this.storeMessage(message);\n    } else {\n      this.onOccupantMessage(null, message.dataType, message.data, message.source);\n    }\n  }\n\n  shouldStartConnectionTo(client) {\n    return true;\n  }\n\n  startStreamConnection(client) {}\n\n  closeStreamConnection(client) {}\n\n  getConnectStatus(clientId) {\n    return this.occupants[clientId] ? NAF.adapters.IS_CONNECTED : NAF.adapters.NOT_CONNECTED;\n  }\n\n  async updateTimeOffset() {\n    if (this.isDisconnected()) return;\n\n    const clientSentTime = Date.now();\n\n    const res = await fetch(document.location.href, {\n      method: \"HEAD\",\n      cache: \"no-cache\"\n    });\n\n    const precision = 1000;\n    const serverReceivedTime = new Date(res.headers.get(\"Date\")).getTime() + precision / 2;\n    const clientReceivedTime = Date.now();\n    const serverTime = serverReceivedTime + (clientReceivedTime - clientSentTime) / 2;\n    const timeOffset = serverTime - clientReceivedTime;\n\n    this.serverTimeRequests++;\n\n    if (this.serverTimeRequests <= 10) {\n      this.timeOffsets.push(timeOffset);\n    } else {\n      this.timeOffsets[this.serverTimeRequests % 10] = timeOffset;\n    }\n\n    this.avgTimeOffset = this.timeOffsets.reduce((acc, offset) => (acc += offset), 0) / this.timeOffsets.length;\n\n    if (this.serverTimeRequests > 10) {\n      debug(`new server time offset: ${this.avgTimeOffset}ms`);\n      setTimeout(() => this.updateTimeOffset(), 5 * 60 * 1000); // Sync clock every 5 minutes.\n    } else {\n      this.updateTimeOffset();\n    }\n  }\n\n  getServerTime() {\n    return Date.now() + this.avgTimeOffset;\n  }\n\n  getMediaStream(clientId, type = \"audio\") {\n    if (this.mediaStreams[clientId]) {\n      debug(`Already had ${type} for ${clientId}`);\n      return Promise.resolve(this.mediaStreams[clientId][type]);\n    } else {\n      debug(`Waiting on ${type} for ${clientId}`);\n      if (!this.pendingMediaRequests.has(clientId)) {\n        this.pendingMediaRequests.set(clientId, {});\n\n        const audioPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).audio = { resolve, reject };\n        });\n        const videoPromise = new Promise((resolve, reject) => {\n          this.pendingMediaRequests.get(clientId).video = { resolve, reject };\n        });\n\n        this.pendingMediaRequests.get(clientId).audio.promise = audioPromise;\n        this.pendingMediaRequests.get(clientId).video.promise = videoPromise;\n\n        audioPromise.catch(e => console.warn(`${clientId} getMediaStream Audio Error`, e));\n        videoPromise.catch(e => console.warn(`${clientId} getMediaStream Video Error`, e));\n      }\n      return this.pendingMediaRequests.get(clientId)[type].promise;\n    }\n  }\n\n  setMediaStream(clientId, stream) {\n    // Safari doesn't like it when you use single a mixed media stream where one of the tracks is inactive, so we\n    // split the tracks into two streams.\n    const audioStream = new MediaStream();\n    try {\n    stream.getAudioTracks().forEach(track => audioStream.addTrack(track));\n\n    } catch(e) {\n      console.warn(`${clientId} setMediaStream Audio Error`, e);\n    }\n    const videoStream = new MediaStream();\n    try {\n    stream.getVideoTracks().forEach(track => videoStream.addTrack(track));\n\n    } catch (e) {\n      console.warn(`${clientId} setMediaStream Video Error`, e);\n    }\n\n    this.mediaStreams[clientId] = { audio: audioStream, video: videoStream };\n\n    // Resolve the promise for the user's media stream if it exists.\n    if (this.pendingMediaRequests.has(clientId)) {\n      this.pendingMediaRequests.get(clientId).audio.resolve(audioStream);\n      this.pendingMediaRequests.get(clientId).video.resolve(videoStream);\n    }\n  }\n\n  async setLocalMediaStream(stream) {\n    // our job here is to make sure the connection winds up with RTP senders sending the stuff in this stream,\n    // and not the stuff that isn't in this stream. strategy is to replace existing tracks if we can, add tracks\n    // that we can't replace, and disable tracks that don't exist anymore.\n\n    // note that we don't ever remove a track from the stream -- since Janus doesn't support Unified Plan, we absolutely\n    // can't wind up with a SDP that has >1 audio or >1 video tracks, even if one of them is inactive (what you get if\n    // you remove a track from an existing stream.)\n    if (this.publisher && this.publisher.conn) {\n      const existingSenders = this.publisher.conn.getSenders();\n      const newSenders = [];\n      const tracks = stream.getTracks();\n\n      for (let i = 0; i < tracks.length; i++) {\n        const t = tracks[i];\n        const sender = existingSenders.find(s => s.track != null && s.track.kind == t.kind);\n\n        if (sender != null) {\n          if (sender.replaceTrack) {\n            await sender.replaceTrack(t);\n\n            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=1576771\n            if (t.kind === \"video\" && t.enabled && navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n              t.enabled = false;\n              setTimeout(() => t.enabled = true, 1000);\n            }\n          } else {\n            // Fallback for browsers that don't support replaceTrack. At this time of this writing\n            // most browsers support it, and testing this code path seems to not work properly\n            // in Chrome anymore.\n            stream.removeTrack(sender.track);\n            stream.addTrack(t);\n          }\n          newSenders.push(sender);\n        } else {\n          newSenders.push(this.publisher.conn.addTrack(t, stream));\n        }\n      }\n      existingSenders.forEach(s => {\n        if (!newSenders.includes(s)) {\n          s.track.enabled = false;\n        }\n      });\n    }\n    this.localMediaStream = stream;\n    this.setMediaStream(this.clientId, stream);\n  }\n\n  enableMicrophone(enabled) {\n    if (this.publisher && this.publisher.conn) {\n      this.publisher.conn.getSenders().forEach(s => {\n        if (s.track.kind == \"audio\") {\n          s.track.enabled = enabled;\n        }\n      });\n    }\n  }\n\n  sendData(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          break;\n        case \"datachannel\":\n          this.publisher.unreliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          break;\n        default:\n          this.unreliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  sendDataGuaranteed(clientId, dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"sendDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }), whom: clientId });\n          break;\n        case \"datachannel\":\n          this.publisher.reliableChannel.send(JSON.stringify({ clientId, dataType, data }));\n          break;\n        default:\n          this.reliableTransport(clientId, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastData(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastData called without a publisher\");\n    } else {\n      switch (this.unreliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          break;\n        case \"datachannel\":\n          this.publisher.unreliableChannel.send(JSON.stringify({ dataType, data }));\n          break;\n        default:\n          this.unreliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  broadcastDataGuaranteed(dataType, data) {\n    if (!this.publisher) {\n      console.warn(\"broadcastDataGuaranteed called without a publisher\");\n    } else {\n      switch (this.reliableTransport) {\n        case \"websocket\":\n          this.publisher.handle.sendMessage({ kind: \"data\", body: JSON.stringify({ dataType, data }) });\n          break;\n        case \"datachannel\":\n          this.publisher.reliableChannel.send(JSON.stringify({ dataType, data }));\n          break;\n        default:\n          this.reliableTransport(undefined, dataType, data);\n          break;\n      }\n    }\n  }\n\n  kick(clientId, permsToken) {\n    return this.publisher.handle.sendMessage({ kind: \"kick\", room_id: this.room, user_id: clientId, token: permsToken }).then(() => {\n      document.body.dispatchEvent(new CustomEvent(\"kicked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  block(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"block\", whom: clientId }).then(() => {\n      this.blockedClients.set(clientId, true);\n      document.body.dispatchEvent(new CustomEvent(\"blocked\", { detail: { clientId: clientId } }));\n    });\n  }\n\n  unblock(clientId) {\n    return this.publisher.handle.sendMessage({ kind: \"unblock\", whom: clientId }).then(() => {\n      this.blockedClients.delete(clientId);\n      document.body.dispatchEvent(new CustomEvent(\"unblocked\", { detail: { clientId: clientId } }));\n    });\n  }\n}\n\nNAF.adapters.register(\"janus\", JanusAdapter);\n\nmodule.exports = JanusAdapter;\n","/* eslint-env node */\n'use strict';\n\n// SDP helpers.\nconst SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substring(2, 12);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(line => line.trim());\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  const parts = blob.split('\\nm=');\n  return parts.map((part, index) => (index > 0 ?\n    'm=' + part : part).trim() + '\\r\\n');\n};\n\n// Returns the session description.\nSDPUtils.getDescription = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// Returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  const sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\n// Input can be prefixed with a=.\nSDPUtils.parseCandidate = function(line) {\n  let parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  const candidate = {\n    foundation: parts[0],\n    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7],\n  };\n\n  for (let i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compatibility.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag. Don't overwrite.\n        if (candidate[parts[i]] === undefined) {\n          candidate[parts[i]] = parts[i + 1];\n        }\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\n// This does not include the a= prefix!\nSDPUtils.writeCandidate = function(candidate) {\n  const sdp = [];\n  sdp.push(candidate.foundation);\n\n  const component = candidate.component;\n  if (component === 'rtp') {\n    sdp.push(1);\n  } else if (component === 'rtcp') {\n    sdp.push(2);\n  } else {\n    sdp.push(component);\n  }\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  const type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// Sample input:\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substring(14).split(' ');\n};\n\n// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  let parts = line.substring(9).split(' ');\n  const parsed = {\n    payloadType: parseInt(parts.shift(), 10), // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generates a rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  const channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses a extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1],\n    attributes: parts.slice(2).join(' '),\n  };\n};\n\n// Generates an extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri +\n      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +\n      '\\r\\n';\n};\n\n// Parses a fmtp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  const parsed = {};\n  let kv;\n  const parts = line.substring(line.indexOf(' ') + 1).split(';');\n  for (let j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  let line = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    const params = [];\n    Object.keys(codec.parameters).forEach(param => {\n      if (codec.parameters[param] !== undefined) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  const parts = line.substring(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' '),\n  };\n};\n\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  let lines = '';\n  let pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(fb => {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses a RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  const sp = line.indexOf(' ');\n  const parts = {\n    ssrc: parseInt(line.substring(7, sp), 10),\n  };\n  const colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substring(sp + 1, colon);\n    parts.value = line.substring(colon + 1);\n  } else {\n    parts.attribute = line.substring(sp + 1);\n  }\n  return parts;\n};\n\n// Parse a ssrc-group line (see RFC 5576). Sample input:\n// a=ssrc-group:semantics 12 34\nSDPUtils.parseSsrcGroup = function(line) {\n  const parts = line.substring(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// Returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substring(6);\n  }\n};\n\n// Parses a fingerprint line for DTLS-SRTP.\nSDPUtils.parseFingerprint = function(line) {\n  const parts = line.substring(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint),\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  let sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(fp => {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  const parts = line.substring(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  const parts = keyParams.substring(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES parameters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substring(12),\n    password: pwd.substring(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n  if (params.iceLite) {\n    sdp += 'a=ice-lite\\r\\n';\n  }\n  return sdp;\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  const description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: [],\n  };\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  description.profile = mline[2];\n  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    const pt = mline[i];\n    const rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      const codec = SDPUtils.parseRtpMap(rtpmapline);\n      const fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')\n    .map(SDPUtils.parseRtcpFb);\n  description.codecs.forEach(codec => {\n    wildcardRtcpFb.forEach(fb=> {\n      const duplicate = codec.rtcpFeedback.find(existingFeedback => {\n        return existingFeedback.type === fb.type &&\n          existingFeedback.parameter === fb.parameter;\n      });\n      if (!duplicate) {\n        codec.rtcpFeedback.push(fb);\n      }\n    });\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  let sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\n  sdp += caps.codecs.map(codec => {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(codec => {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  let maxptime = 0;\n  caps.codecs.forEach(codec => {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(extension => {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  const encodingParameters = [];\n  const description = SDPUtils.parseRtpParameters(mediaSection);\n  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(parts => parts.attribute === 'cname');\n  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  let secondarySsrc;\n\n  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(line => {\n      const parts = line.substring(17).split(' ');\n      return parts.map(part => parseInt(part, 10));\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(codec => {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      let encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc,\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substring(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(params => {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  const rtcpParameters = {};\n\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(obj => obj.attribute === 'cname')[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\nSDPUtils.writeRtcpParameters = function(rtcpParameters) {\n  let sdp = '';\n  if (rtcpParameters.reducedSize) {\n    sdp += 'a=rtcp-rsize\\r\\n';\n  }\n  if (rtcpParameters.mux) {\n    sdp += 'a=rtcp-mux\\r\\n';\n  }\n  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\n    sdp += 'a=ssrc:' + rtcpParameters.ssrc +\n      ' cname:' + rtcpParameters.cname + '\\r\\n';\n  }\n  return sdp;\n};\n\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  let parts;\n  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substring(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(line => SDPUtils.parseSsrcMedia(line))\n    .filter(msidParts => msidParts.attribute === 'msid');\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  const mline = SDPUtils.parseMLine(mediaSection);\n  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  let maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substring(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize,\n    };\n  }\n  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    const parts = sctpMapLines[0]\n      .substring(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize,\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  let output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n',\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n',\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 22);\n};\n\n// Write boiler plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  let sessionId;\n  const version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  const user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  const lines = SDPUtils.splitLines(mediaSection);\n  for (let i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substring(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const mline = lines[0].split(' ');\n  return mline[0].substring(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  const lines = SDPUtils.splitLines(mediaSection);\n  const parts = lines[0].substring(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' '),\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  const parts = line.substring(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  const lines = SDPUtils.splitLines(blob);\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(579);\n"],"names":["JanusPluginHandle","session","this","id","undefined","JanusSession","output","options","nextTxId","txns","eventHandlers","Object","assign","verbose","timeoutMs","keepaliveMs","prototype","attach","plugin","loop_index","payload","send","then","resp","data","detach","on","ev","callback","signal","sender","type","handle_id","sendMessage","body","sendJsep","jsep","sendTrickle","candidate","create","destroy","dispose","txId","_killKeepalive","hasOwnProperty","txn","clearTimeout","timeout","reject","Error","isError","janus","handlers","push","receive","_logIncoming","session_id","console","warn","responseType","i","length","transaction","resolve","toString","Promise","setTimeout","_transmit","_logOutgoing","JSON","stringify","_resetKeepalive","kind","message","debug","_sendKeepalive","keepaliveTimeout","catch","e","error","module","exports","_regeneratorRuntime","Op","hasOwn","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","result","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","res","String","_toPrimitive","mj","require","sendOriginal","indexOf","NAF","connection","adapter","reconnect","sdpUtils","log","isSafari","test","navigator","userAgent","debounce","curr","_this","Array","_","untilDataChannelOpen","dataChannel","readyState","resolver","rejector","clear","removeEventListener","addEventListener","isH264VideoSupported","document","createElement","canPlayType","OPUS_PARAMETERS","usedtx","stereo","DEFAULT_PEER_CONNECTION_CONFIG","iceServers","urls","JanusAdapter","instance","Constructor","_classCallCheck","room","clientId","joinToken","serverUrl","webRtcOptions","peerConnectionConfig","ws","reliableTransport","unreliableTransport","initialReconnectionDelay","Math","random","reconnectionDelay","reconnectionTimeout","maxReconnectionAttempts","reconnectionAttempts","publisher","occupants","leftOccupants","Set","mediaStreams","localMediaStream","pendingMediaRequests","Map","blockedClients","frozenUpdates","timeOffsets","serverTimeRequests","avgTimeOffset","onWebsocketOpen","bind","onWebsocketClose","onWebsocketMessage","onDataChannelMessage","onData","protoProps","_setLocalMediaStream","_updateTimeOffset","_createSubscriber","_fixSafariIceUFrag","_createPublisher","_addOccupant","_onWebsocketOpen","url","app","roomName","successListener","failureListener","connectSuccess","connectFailure","occupantListener","onOccupantsChanged","openListener","closedListener","messageListener","onOccupantConnected","onOccupantDisconnected","onOccupantMessage","reconnectingListener","reconnectedListener","reconnectionErrorListener","onReconnecting","onReconnected","onReconnectionError","loops","_this2","concat","websocketConnection","WebSocket","wsOnOpen","all","updateTimeOffset","removeAllOccupants","conn","close","delayedReconnectTimeout","_callee","addOccupantPromises","occupantId","_context","createPublisher","initialOccupants","addOccupant","event","_this3","code","_this4","disconnect","connect","_this5","parse","_callee2","subscriber","_context2","removeOccupant","createSubscriber","setMediaStream","mediaStream","_x","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","f","add","has","msg","get","audio","video","_this6","iceConnectionState","performDelayedReconnect","offer","createOffer","configurePublisherSdp","fixSafariIceUFrag","local","o","setLocalDescription","remote","j","r","setRemoteDescription","answer","configureSubscriberSdp","createAnswer","a","_callee3","webrtcup","reliableChannel","unreliableChannel","_this7","_context3","RTCPeerConnection","parseInt","associate","createDataChannel","ordered","maxRetransmits","getTracks","track","addTrack","plugindata","room_id","user_id","dispatchEvent","CustomEvent","detail","by","sendJoin","notifications","success","response","users","includes","sdp","replace","line","pt","parameters","parseFmtp","writeFmtp","payloadType","_callee4","_context4","_x2","_callee5","maxRetries","webrtcFailed","_this8","_args5","_context5","leftInterval","setInterval","clearInterval","media","_iOSHackDelayedInitialPeer","MediaStream","getReceivers","receiver","_x3","subscribe","token","frozen","unfreeze","freeze","flushPendingUpdates","networkId","l","d","dataType","dataForUpdateMultiMessage","owner","getPendingData","_step2","_iterator2","_step2$value","source","storeSingleMessage","index","storedMessage","storedData","isOutdatedMessage","lastOwnerTime","isContemporaneousMessage","isFirstSync","set","components","enabled","storeMessage","client","adapters","IS_CONNECTED","NOT_CONNECTED","_callee6","clientSentTime","serverReceivedTime","clientReceivedTime","timeOffset","_this9","_context6","isDisconnected","Date","now","fetch","location","href","cache","headers","getTime","precision","reduce","acc","offset","_this10","audioPromise","videoPromise","promise","stream","audioStream","getAudioTracks","videoStream","getVideoTracks","_callee7","existingSenders","newSenders","tracks","_loop","_this11","_context8","getSenders","t","_context7","find","replaceTrack","toLowerCase","removeTrack","_x4","whom","permsToken","_this12","_this13","register","SDPUtils","substring","localCName","generateIdentifier","splitLines","blob","trim","split","map","splitSections","part","getDescription","sections","getMediaSections","shift","matchPrefix","prefix","filter","parseCandidate","parts","foundation","component","protocol","priority","ip","address","port","relatedAddress","relatedPort","tcpType","ufrag","usernameFragment","writeCandidate","toUpperCase","join","parseIceOptions","parseRtpMap","parsed","clockRate","channels","numChannels","writeRtpMap","codec","preferredPayloadType","parseExtmap","direction","uri","attributes","writeExtmap","headerExtension","preferredId","kv","params","param","parseRtcpFb","parameter","writeRtcpFb","lines","rtcpFeedback","fb","parseSsrcMedia","sp","ssrc","colon","attribute","parseSsrcGroup","semantics","ssrcs","getMid","mediaSection","mid","parseFingerprint","algorithm","getDtlsParameters","sessionpart","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","tag","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","pwd","password","writeIceParameters","iceLite","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","mline","profile","rtpmapline","fmtps","wildcardRtcpFb","existingFeedback","writeRtpDescription","caps","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","primarySsrc","secondarySsrc","flows","apt","encParam","codecPayloadType","rtx","fec","mechanism","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","writeRtcpParameters","parseMsid","spec","planB","msidParts","parseSctpDescription","parseMLine","maxSizeLine","maxMessageSize","sctpPort","fmt","sctpMapLines","writeSctpDescription","sctp","generateSessionId","substr","writeSessionBoilerplate","sessId","sessVer","sessUser","sessionId","version","getDirection","getKind","isRejected","parseOLine","username","sessionVersion","netType","addressType","isValidSDP","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}